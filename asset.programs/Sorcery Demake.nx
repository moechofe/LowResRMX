REVISION=20


'======================CORE:

'( ) HANDLE NOT INIT RANDOM USER'S SEED


'======================TODO:

'(X) TAP TO PLAY A CARD
'( ) DRAW A CARD FROM DECK
'( ) RESTORE STACK
'( ) SHOW OUTLINE AROUND STACK
'(X) SHOW ANIMATION WHEN CARD IS PLAYED
'(X) SHOW ANIMATION WHEN CARD IS REVEALED
'(X) DECIDE HOW MANY PLAYED ANIMATION CARD CAN BE SHOWN AT THE SAME TIMES, AND RESERVE THE SPRITE NUMS
'(X) ANIMATE PLAYED CARD TO MAKE THEM REACH THE DRAWN ONE
'(X) COMPUTE THE CARD VALUE BEFORE STARTING THE REVEAL ANIMATION, MUST BE STORED SOMEWHERE
'(X) SHOW THE RIGHT CARD VALUE DURING PLAYED CARD ANIMATION
'(X) SHOW THE VALUE EARLY DURING THE REVEAL CARD ANIMATION
'( ) ENCODE STACKS TO FILE/ROM



'======================IDEA:

'( ) CHANGE THE SPEED OF THE PLAY CARD ANIMATION FOR A SLOW-MO EFFECT


'=======================DOC:

'BG#3 IS FOR STATIC SCENARI: MAP, BATTLE
'BG#2 IS FOR MONSTER AND CARDS
'BG#1 IS FOR CARDS SPELL OFFSETED BY 4,X4 PIXEL TO CENTER SPELL ICON ON CARDS
'BG#0 IS FOR UI

GLOBAL SPR_PLAY

'SPR#30..? PLAYED CARD ANIMATION
SPR_PLAY=38

GLOBAL MEM_REVEAL, MEM_SEED

'MEM$9000..$90C0 BG CELLS CACHED FOR THE REVEAL CARD ANIMATION, 2*6 CELLS = 12, 12 * 2 BYTES = 22 BYTES, 22 * 8 STACKS = 192 BYTES = $C0
'MEM$90C0.. VALUE DISTRIBUTION SEED
'
'TODO: REMOVE MEM_REVEAL
MEM_REVEAL=$9000
MEM_SEED=$90C0


GLOBAL LEF,TOP

'SCREEN IS 216X384 PIXELS OR 27X48 CELLS
'LIMIT THE "PLAYABLE" SPACE TO 177X288 PIXELS OR 22X36 CELLS
LEF=(177-SHOWN.W)\2
TOP=(288-SHOWN.H)\2

SCROLL 0,LEF,TOP
SCROLL 1,LEF+4,TOP
SCROLL 2,LEF,TOP
SCROLL 3,LEF,TOP

BG 3
PAL 3
BG FILL 0,0 TO 21,35 CHAR 1
BG FILL 1,1 TO 20,34 CHAR 2


'======================MATH:

SUB EASEDERIV(F,M,X,S,FX)
'COMPUTE THE RESULT OF A DERIVATE FUNCTION OF A EASING
'IN F,M FUNCTION AND EASING MODE
'INOUT THE INPUT UNIT VALUE
'IN S STEP UNIT PROGRESS
'IOUT THEOUTPUT UNIT VALUE
  B=EASE(F,M,X)
  ADD X,S
  A=EASE(F,M,X)
  FX=A-B
END SUB


'======================DECK:

SUB SHOWDECK(X,Y,D)
'TODO: COPY CHARA
BG 2
BG COPY 0,0,4,6 TO X,Y
BG COPY 0,11,4,1 TO X,Y+6
'BG 1
'BG COPY 0,6,3,5 TO X+1,Y+1
END SUB

'=====================COMBO:

'COMPUTE BEST COMBO
'IF BEST COMBO IS SMALL, GIVE A NICE CARD


'=====================VALUE:

'CARD AND FAMILY VALUE
'(S,) STACK IDX
'(,I) STACK ITEM IDX
DIM GLOBAL VALUE(7,5)
DIM GLOBAL FAMILY(7,5)


'WHEN REVEALING CARDS, THIS CODE WILL SELECT A VALUE ACCORDING
'TO THE POSSIBLE LONGEST COMBO WANTED

'IDEA: USE A NUMBER OF RETRY TO TRY GETTING A SPECIFIC VALUE TO CONTINU A COMBO, RESUCE THE NUMBER OF RETRY OVER TIME

'IDEA: TRY TO GET A VALUE THAT CAN BE PLAYED WITH THE DRAWN CARD

'IDEAM TRY TO GET A VALUE THAT CAN BE PLAYED WITH ONE OF THE REVEALED CARD

'IDEA: DIFFERENT HELP MODE, NO HELP, HELP TO BUILD COMBO, HELP WITH THE DRAWN CARD.

'IDEA: LIMIT NUMBER OF PLAYABLE CARD WITH THE SAME VALUE

'IDEA: TRACK AVERAGE TARGET COMBO, AVERAGE REALIZED COMBO. ALSO CURRENT TARGET COMBO AND CURRENT COMBO

'FIRST TRY TO GET A VALUE FOR THE DRAWN, IF IT FAILS, TRY TO GET A VALUE FOR ONE OF THE REVEALED

'CARD VALUE:
'0= NO VALUE
'1= AS
'2..10 2 TO 10
'11 JACK
'12 QUEEN
'13 KING

GLOBAL DRAWN,RETRYD,RETRYR,DISTEED

'VALUE OF THE CARD DRAWN
DRAWN=RND(12)+1

'NUMBER OF RETRY TO GET A PLAYABLE VALUE FOR THE DRAWN CARD
RETRYD=0

'NUMBER OF RETRY TO GET A PLAYABLE VALUE FOR ONE OF THE REVEALED CARD
RETRYR=0

'LIST OF REVEALED CARD PER STACK
DIM GLOBAL REVEALED(7)
'(S) STACK ID

SUB RESETDISTRIB
RANDOMIZE RND,MEM_SEED
END SUB

SUB COMPVALUE(S,I)
'COMPUTE A VALUE FOR A CARD
  'DO NOT CHANGE THE VALUE IF ALREAD SET
  IF VALUE(S,I) THEN EXIT SUB
  VALUE(S,I)=RND(12,MEM_SEED)+1
  FAMILY(S,I)=RND(3)
  TRACE "FAM",FAMILY(S,I)
END SUB


'==================PLAYABLE:

'TRACK A LIST OF PLAYABLE VALUE

DIM GLOBAL PLAYABLE(7)

SUB ISPLAYABLE(YES,V)
'CHECK IF A VALUE CAN BE PLAYED ACCORDING THE CURRENT BOARD, A.K.A.: THE LIST OF PLAYABLE VALUE, A.K.A.: THE CARD FACING THEIRS FRONT SIDE
'OUT YES
'IN CANDIDATE VALUE 1..13
YES=0
IF V<1 OR V>13 THEN EXIT SUB
FOR I=0 TO UBOUND(PLAYABLE,1)
'CANDIDATE
C=PLAYABLE(I)
IF V+1=C OR V-1=C THEN
 YES=-1
 EXIT SUB
END IF
NEXT I
END SUB


'======================CARD:

'RESPONSIBLE TO SHOW CARD AND ANIMATED THEM

SUB SHOWSYMBOL(X,Y,V,C,R)
'SHOW CARD VALUE AND FAMILY COLOR
'IN X,Y POS IN CELL COORDS
'IN V CARD VALUE >0
'IN C CARD FAMILY COLOR
'IN R REVERSE MODE FOR BOTTOM-RIGHT CORNER
PAL C\2*2
'THE VALUE
CELL X,Y,47+V
CELL X,Y+1*R,32+C
END SUB

SUB SHOWCARD(X,Y,F,V,C)
'IN X,Y POS IN CELL COORDS
'IN F FACING 0=BACK SIDE, 1=FRONT SIDE
'IN V CARD VALUE >0
'IN C CARD FAMILY COLOR
BG 2
BG COPY F*4,0,4,6 TO X,Y
IF V<1 THEN EXIT SUB
CALL SHOWSYMBOL(X,Y,V,C,1)
CALL SHOWSYMBOL(X+3,Y+5,V,C,-1)
'PAL C\2*2
'CELL X,Y,47+V : CELL X+3,Y+5,47+V
'CELL X,Y+1,32+C : CELL X+3,Y+4,32+C
END SUB

SUB ERASECARD(X,Y)
'WILL ERASE THE CARD AND CREATE A HOLE IN THE BG
'IN X,Y POS IN CELL COORDS
BG 2
BG FILL X,Y TO X+3,Y+5 CHAR 0
END SUB


'============CARD_ANIMATION:

GLOBAL PLAYN,REVEALN

'INDEX OF THE NEXT FREE ANIMATION
PLAYN=0

'PLAYED CARD ANIMATION STATUS
'(I) ANIMATION IDX
'(I)=0 NOT USED
'(I)=1 WILL SWITCH TO USE SPRITE
'(I)=2 WILL MOVE THE CARD TO THE BOTTOM, OUT OF THE BOARD
DIM GLOBAL PLAYA(7)
'DOWN SPEED
DIM GLOBAL PLAYD(7)
'STACK AND ITEM IDX
DIM GLOBAL PLAYS(7)
DIM GLOBAL PLAYI(7)

'DISTANCE TO CROSS TO MAKE THE CARD REACH THE DRAWN ONE AND COVER IT IN PIXELS COORDS
'ORIGINAL POSITION OF THE CARD
DIM GLOBAL PLAYX(7)
DIM GLOBAL PLAYY(7)

SUB PLAYCARD(X,Y,S,I)
'SHOW A CARD THAT HAS BEEN PLAYED
'STOP USING CELL AND START USING SPRITE
'MAKE IT GET OUT FROM THE BOTTOM OF THE BOARD
'IN X,Y POS IN CELL COORDS
PLAYA(PLAYN)=1
PLAYD(PLAYN)=-5
PLAYD(PLAYN)=0
PLAYS(PLAYN)=S
PLAYI(PLAYN)=I

PLAYX(PLAYN)=(12-X)*8
PLAYY(PLAYN)=(28-Y)*8

'PLAYX(PLAYN)=X
'PLAYY(PLAYN)=Y

P=SPR_PLAY+PLAYN*5
ADD PLAYN,1,0 TO 7
X=STAKX(S,I)*8-LEF
Y=STAKY(S,I)*8+8-TOP
C=FAMILY(S,I)\2*2
'FOR THE CARD WHITE RECT
SPRITE P+4,X,Y,0
SPRITE P+4 PAL 0 SIZE 0
'FOR THE TOP-LEFT CARD VALUE
SPRITE P+3,X,Y,0
SPRITE P+3 PAL C
'FOR THE BOTTOM-RIGHT CARD VALUE
SPRITE P+2,X+24,Y+24,0
SPRITE P+2 PAL C
'FOR THE TOP-LEFT CARD FAMILY
SPRITE P+1,X,Y+8,0
SPRITE P+1 PAL C
'FOR THE BOTTOM-RIGHT CARD FAMILY
SPRITE P+0,X+24,Y+16,0
SPRITE P+0 PAL C

'PLAYX(PLAYN)=X
'PLAYY(PLAYN)=Y
'TRACE X,Y
END SUB

SUB UPDPLAY
'UPDATE PLAYED CARD ANIMATION
Y=0 : X=0
N=-1
UP_LOOP:
  IF N>=UBOUND(PLAYA,1) THEN EXIT SUB
  INC N
  P=SPR_PLAY+N*5
  A=REVEALA(N)
  ON PLAYA(N) GOTO UP_NOTHING, UP_SPRITE, UP_LIFTUP, UP_GOTODRAWN, UP_COVERDRAW
UP_NOTHING: GOTO UP_LOOP
UP_SPRITE:
'TRANSFORM TO SPRITE, IT WILL SHOW IT 32 PIXELS SHORTER: 6 CELLS TO 4 CELLS.
  V=VALUE(PLAYS(N),PLAYI(N))
  C=FAMILY(PLAYS(N),PLAYI(N))
  SPRITE P+4,,,64
  SPRITE P+4 SIZE 3
  SPRITE P+3,,,47+V
  SPRITE P+2,,,47+V
  SPRITE P+1,,,32+C
  SPRITE P+0,,,32+C
  INC PLAYA(N)
  GOTO UP_LOOP

UP_LIFTUP:
  'COMPUTE SPEED INSTEAD OF POSITION
  CALL EASEDERIV(3,1,PLAYD(N),1/8,Y)
  Y=-Y*32
  X=0
  GOSUB UP_UPDSPR
  IF PLAYD(N)>1 THEN
   INC PLAYA(N)
   PLAYD(N)=0
  END IF
  GOTO UP_LOOP

UP_GOTODRAWN:
  'COMPUTE SPEED INSTEAD OF POSITION
  CALL EASEDERIV(3,-1,PLAYD(N),1/12,Y)
  X=Y*PLAYX(N)
  Y=Y*(PLAYY(N)+32)
  GOSUB UP_UPDSPR
  IF PLAYD(N)>1 THEN INC PLAYA(N)
  GOTO UP_LOOP

UP_COVERDRAW:
'REACH THE DRAW CARD, REPLACE IT
  SPRITE OFF P TO P+4
  DRAWN=VALUE(PLAYS(N),PLAYI(N))
  TRACE "D",DRAWN
  C=FAMILY(PLAYS(N),PLAYI(N))
  CALL SHOWCARD(12,28,1,DRAWN,C)
  PLAYA(N)=0
  GOTO UP_LOOP

UP_UPDSPR:
  FOR I=P TO P+4
  SPRITE I,SPRITE.X(I)+X,SPRITE.Y(I)+Y,
  NEXT I
  RETURN

END SUB

'INDEX OF THE NEXT FREE ANIMATION
REVEALN=0

'REVEALED CARD ANIMATION STATUS
'(I) ANIMATION IDX
'(I)=0 NOT USED
'(I)=1 CARD TAKES 3 CELLS IN Y AXIS
'(I)=4 TAKES 2 CELLS
'(I)=7 TAKES 1 CELL
DIM GLOBAL REVEALA(7)
'STACK AND ITEM IDX
DIM GLOBAL REVEALS(7)
DIM GLOBAL REVEALI(7)


SUB REVEALCARD(S,I)
'USE BG CELL TO SHOW THE FLIP IN ITS VERTICAL AXIS
'IN S,I STACK IDX AND ITEM IDX
REVEALA(REVEALN)=1
REVEALS(REVEALN)=S
REVEALI(REVEALN)=I
ADD REVEALN,1,0 TO 7
'COMPUTE THE NEXT VALUE NOW
CALL COMPVALUE(S,I)
END SUB

SUB UPDREVEAL
'UPDATE REVEALED CARD ANIMATION, MAKE THE CARD FACING BACK GET TURNED OF ITS FRONT SIDE. SHOW IT SMALLER AND SMALLER ON THE X AXIS, THEN MAKE IT BIGGER AND BIGGER. USE ALTERNATIVELY THE BG#2 AND BG#1 TO KEEP THE CARD CENTERED. AS THE BG#1 IS SHIFTED BY 4 PIXELS ON THE X AXIS.
N=-1
UR_LOOP:
  IF N>=UBOUND(REVEALA,1) THEN EXIT SUB
  INC N
  A=REVEALA(N)
  IF A=0 THEN GOTO UR_LOOP
  ADD REVEALA(N),1/2
  S=REVEALS(N) : I=REVEALI(N)
  X=STAKX(S,I) : Y=STAKY(S,I)
  V=VALUE(S,I) : C=FAMILY(S,I)
  IF A>4 AND A=INT(A) THEN ON A-5 GOTO UR_BACK3, UR_BACK2, UR_BACK1, UR_FRONT2, UR_FRONT3, UR_FRONT4
  GOTO UR_LOOP
UR_BACK3:
'THREE WIDTH BACK CARD
  GOSUB UR_CLEAR2
  BG 1 : BG COPY 8,0,3,6 TO X+1,Y
  GOTO UR_LOOP
UR_BACK2:
'TWO WIDTH BACK CARD
  GOSUB UR_CLEAR1
  BG 2 : BG COPY 11,0,2,6 TO X+1,Y
  GOTO UR_LOOP
UR_BACK1:
'ONE WIDTH BACK CARD
  GOSUB UR_CLEAR2
  BG 1 : BG COPY 13,0,1,6 TO X+2,Y
  GOTO UR_LOOP
UR_FRONT2:
'TWO WIDTH FRONT CARD
  GOSUB UR_CLEAR1
  BG 2 : BG COPY 4,0,2,6 TO X+1,Y
  CALL SHOWSYMBOL(X+1,Y,V,C,1)
  CALL SHOWSYMBOL(X+2,Y+5,V,C,-1)
  GOTO UR_LOOP
UR_FRONT3:
  GOSUB UR_CLEAR2
  BG 1 : BG COPY 4,0,3,6 TO X+1,Y
  CALL SHOWSYMBOL(X+1,Y,V,C,1)
  CALL SHOWSYMBOL(X+3,Y+5,V,C,-1)
  GOTO UR_LOOP
UR_FRONT4:
  GOSUB UR_CLEAR1
  CALL FRONTCARD(S,I)
  REVEALA(N)=0
  GOTO UR_LOOP
UR_CLEAR1:
'CLEAR CELLS DRAW ON BG 1, THE ONE THAT IS SHIFTED 4 PIXELS
  BG 1
  BG FILL X+1,Y TO X+3,Y+5 CHAR 0
  RETURN
UR_CLEAR2:
'CLEAR CELLS DRAW ON BG 2
  BG 2
  'ERASE THE CELLS USED BY THE REMOVED CARD AND REPAIR THE CELLS USED BY THE CARDS BELOW IT
  CALL ERASECARD(X,Y)
  FOR J=0 TO I-1 : CALL BACKCARD(S,J) : NEXT J
  RETURN
END SUB


'=====================STACK:

'CARD POS IN CELL COORDS
'(S,) STACK IDX
'(,I) STACK ITEM IDX
DIM GLOBAL STAKX(7,5)
DIM GLOBAL STAKY(7,5)
'CARD STATUS
'(S,I)=0 NO CARD
'(S,I)=1 BACK SIDE
'(S,I)=2 FRONT SIDE
DIM GLOBAL STAKS(7,5)

SUB ADDCARD(S,X,Y)
'ADD A NEW ITEM IN THE STACK
'DRAW IT ON THE BOARD
'UPDATE STACK BORDER
'IN S STACK IDX
'IN X,Y POS IN CELL COORDS
'LOOK FOR NEXT ITEM IDX
I=0 : WHILE STAKS(S,I)>0 : INC I : WEND
STAKX(S,I)=X : STAKY(S,I)=Y
'CARD VALUE
VALUE(S,I)=0
CALL BACKCARD(S,I)
END SUB

SUB DELCARD(S,I)
'DEL AN ITEM IN THE STACK
'IN S,I STACK IDX AND ITEM IDX
X=STAKX(S,I) : Y=STAKY(S,I)
CALL ERASECARD(X,Y)
STAKS(S,I)=0
PLAYABLE(S)=0
'CARD UNDER
IF I>0 THEN
 FOR J=0 TO I-1 : CALL BACKCARD(S,J) : NEXT J
 CALL REVEALCARD(S,I-1)
END IF
END SUB

SUB BACKCARD(S,I)
'MAKE A CARD FACING BACK
'UPDATE STAK
'IN S,I STACK IDX AND ITEM IDX
STAKS(S,I)=1
X=STAKX(S,I) : Y=STAKY(S,I)
CALL SHOWCARD(X,Y,0,0,0)
END SUB

SUB FRONTCARD(S,I)
'MAKE A CARD FACING FRONT
'UPDATE STAK
'IN S,I STACK IDX AND ITEM IDX
STAKS(S,I)=2
X=STAKX(S,I) : Y=STAKY(S,I)
CALL SHOWCARD(X,Y,1,VALUE(S,I),FAMILY(S,I))
PLAYABLE(S)=VALUE(S,I)
END SUB

SUB ISPLAYINGCARD(YES,X,Y,S,I)
'CHECK IF CARD CAN BE PLAYED
'IN X,Y TOUCH POSITION IN CELL COORDS
'OUT X,Y POS IN CELL COORDS
'OUT S,I STACK IDX AND ITEM IDX
YES=0
FOR S=0 TO UBOUND(STAKS,1)
FOR I=0 TO UBOUND(STAKS,2)
IF STAKS(S,I)=2 THEN
 CX=STAKX(S,I) : CY=STAKY(S,I)
 IF X>=CX AND X<=CX+3 AND Y>=CY AND Y<=CY+5 THEN
  YES=-1
  X=CX : Y=CY
  EXIT SUB
 END IF
END IF
NEXT I
NEXT S
END SUB


'====================BOARD:

'PACKED DATA FORMAT:

'%00-XXXXX ---YYYYY START A NEW CARD STACK STARTING AT POSITION X,Y IN CELL COORDINATES.
'%10XXXYYY ADD ANOTHER CARD TO THE CURRENT STACK WITH POSITION X,Y FROM RELATIVE THE PREVIOUS ONE.
'%11 RESERVED FOR FUTUR USAGE

SUB LOADBOARD(A)
'IN A STARTING ADDRESS WHERE TO START LOADING DATA

'TODO CLEAR BOARD
X=0 : Y=0 : S=-1
LB_LOOP:
  D=PEEK(A) : INC A
  W=D\64
  ON D\64 GOTO LB_START, LB_LOOP, LB_ADD
LB_START:
  X=D AND %00011111
  Y=PEEK(A) AND %00011111
  INC A
  INC S
  CALL ADDCARD(S,X,Y)
  GOTO LB_LOOP
LB_ADD:
  ADD X,(D\8) AND %111
  D=PEEK(A) : INC A
  ADD Y,D AND %111
  GOTO LB_LOOP
END SUB



'====================BATTLE:

'TELL USER AS PLAYED A CARD THIS FRAME
GLOBAL ISPLAY

SUB UPDPLAYCARD
'HANDLE CARD PLAYED
'REMOVE THE CARD
'REVEAL THE CARD BELOW
'START CARD PLAYING ANIMATION
IF NOT TAP THEN EXIT SUB
X=(TOUCH.X+LEF)\8
Y=(TOUCH.Y+TOP)\8
S=-1 : I=-1
CALL ISPLAYINGCARD(ISPLAY,X,Y,S,I)
IF ISPLAY THEN
 TRACE "PLAYING",S,I
 CALL DELCARD(S,I)
 CALL PLAYCARD(X,Y,S,I)
END IF
END SUB


BATTLE:
  CALL RESETDISTRIB

  CALL SHOWDECK(6,27,0)
  CALL SHOWCARD(12,28,1,DRAWN,RND(3))

  CALL ADDCARD(0,0,21)
  CALL ADDCARD(0,1,20)
  CALL ADDCARD(0,2,19)
  CALL ADDCARD(0,3,18)

  CALL COMPVALUE(0,3)
  CALL FRONTCARD(0,3)

  CALL ADDCARD(1,18,21)
  CALL ADDCARD(1,17,20)
  CALL ADDCARD(1,16,19)
  CALL ADDCARD(1,15,18)

  CALL COMPVALUE(1,3)
  CALL FRONTCARD(1,3)

  CALL ADDCARD(2,9,17)
  CALL ADDCARD(2,9,18)
  CALL ADDCARD(2,9,19)

  CALL COMPVALUE(2,2)
  CALL FRONTCARD(2,2)

DO
  ISPLAY=0

  CALL UPDPLAYCARD
  CALL UPDPLAY
  CALL UPDREVEAL

  WAIT VBL
LOOP










#1:MAIN PALETTES
060205070038393D00021F01003F3800
003F2A15003F2A15003F2A15003F2A15

#2:MAIN CHARACTERS
00000000000000000000000000000000
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0000000000000000FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF0000000000000000
FFEFD7BAD7EDFBEFFFFFEFC7EEFEFCF0
FFFFFFFFFFFCE08FFF00FF00031F7FF0
FFFEFEFCFDFDF9FBA1A3A3A7A6A6AEAC
FBFBFBFBFBFBFBFBACACACACACACACAC
3F7FFFFFFFEFD7EFC080000000103810
FFDFAFDFFFFFFFFF0020702000000000
FCFFFF5F7D332C2D00783F3F030C1B1A
00C37EDBE77EBD7E000081E7FFFF7EBD
5CFFBFFEFFFFFFFF3B3C7E7F7F7F7F3F
5AFFFFFF5AFFFFFFBD3CE742A5E7FFFF
7F7F37190F0302033F1F0F0600000100
FFFF5DE7FF24FFFFFFFFBE1800DBDB00
FF007F003F001F00007F003F001F0000
FF00FF00FF00FF0000FF00FF00FF0000
01010001010001010000000000000000
00000000000000DB0000000000000000
01010001010001DB0000000000000000
81810081810081810000000000000000
DB000000000000DB0000000000000000
DB010001010001DB0000000000000000
FFFFFFFFFFFFE781FF00FF00183C7EFF
3C7EFFFFFFEFD7EFC381000000103810
08080808080808081818181818181818
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
FFFFFFFFFFDDFFFF00081C3E3E36081C
FFEBFFDDFFD5FFFF001C1C3E3E3E081C
FFDDFFFFDDEBFFFF00363E3E3E1C0800
FFFFFFFFFFFFFFFF00081C3E3E1C0800
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
FFEDDFFFFFFFFFFF001E36263E262600
FFDDFFF5EBD7FFFF003E360E1C383E00
FFDDFFFDFFFFDDFF003E260E06263E00
FFF7EBD7EFFFFFFF000C1C38363E0600
FFFFFFFDFFFFDDFF003E303E06263E00
FFDDFFFDFFFFDDFF003E303E36363E00
FFFFFFF5EBFFFFFF003E260E1C181800
FFDDFFDDFFFFDDFF003E363E36363E00
FFDDFFDFFFFFDDFF003E363E06263E00
FFF5FFBFFFFFF5FF002E6A6A2A2A7E00
FFFFFFFFFFFFDBFF001E0C0C0C2C3C00
FFFFFFFFFFF7FFFF001C26262E2E1C00
FFFFFBF7FFF7FBFF0030363C383C3600
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000
FFFFFFFFFFFFFFFF0000000000000000

#3:MAIN BG
00001410040105010509040903000300
03000300040118010409040104091A01
00000000000000000000000006010801
08090609030003000300030006011901
0609060106091A010000000000000000
00000000070109090301070903000300
03000300070109090709070107091A01
00000000000000000000000007010301
09010709030003000300030007010301
0709070107091A010000000000000000
00000000061108110819061903000300
03000300061119190619061106191A01
00000000000000000000000004110511
05190419030003000300030004111811
0419041104191A010000000000000000
00000000000100010001000000000000
00000000000000000000000000000000
0000000000000000000000000A010B01
0A090000000000000000000000000000
00000000000000000000000000000000
000000000C010D010C09000000000000
00000000000000000000000000000000
0000000000000000000000000E010F01
0E090000000000000000000000000000
00000000000000000000000000000000
00000000000100010001000000000000
00000000000000000000000000000000
00000000000000000000000010011109
11091009000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000

#5:BOARD
