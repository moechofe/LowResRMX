'PALED: A GFX EDITOR FOR LOWRESRMX
'BY MARTIN "MOECHOFE" MAUCHAUFFEE IN 2024..
'REVISION: 0.112

'TODO CORE:
'OPTIONAL COLOR ARGUMENT FOR CLS
'OFFSET MESSAGE COMMAND BY 1 PIXEL UP AND RIGHT

'RIGHT TRIM CHARACTER AT SAVE
'RIGHT TRIN BACKGROUND AT SAVE
'IMPLEMENT UNDO FOR CHARED
'I NEED A MENU FOR PEN/RECT/BRUSH
'I SHOULD SEPERATE WHICH PAN VARIABLE IS USED FOR EACH EDITOR BGX, CHX
'CHARACTER MORE PANEL
'ALLOW TO ONLY REDRAW MISSING CELLS ON BACKED WHEN PANNING
'I HAVE TO COMPUTE HEIGHT OF BOTTOM BAR AT START AND KEEP IT, IT SHOULD NOT CHANGE WHEN SHOWING A DIFFERENT CONTENT. REMOVE BOTHEIGHT
'BLACK SCREEN DURING FILED LOADING
'BLACK SCREEN DURING BACKED LOADING
'SUB MENU FOR PALETTE SELECTOR
'REUSE FRAME TO DRAW COLOR SELECTION BUTTON, REDO RAIN EFFECT, RENAME IT, PUT BG INSTRUCTION IN BOTASSET DIRECTLY
'NEED A SCROLL INDIQUATOR NEAR THE CHARALIST.

'DECIDE WHERE TO PUT THE CHARED TOOLS AND HOW TO USE IT.
'PAINT TOOL: PEN. RECT OR LINE MAKE SENS ONLY FOR A SHEET EDITOR.
'CLEAR WITH COLOR, OR, CUT/COPY/PASTE CAN BE USEFULL BUT NOT BY HIDDING THE CHARALIST.
'MOVE PIXELS, OR FLIP ARE OK.

'LET'S TRY:
'PEN BTN: PEN, FILL, MOVE: LEFT,RIGHT,UP,DOWN, FLIP: HORI,VERTI, SPIN, UNDO. PEN AND CLEAR CLOSE THE MENU, OTHER NO.
'MORE BTN: KEEP CHARALIST, CLEAR, CUT,COPY,PASTE, INSERT,

'I HAVE TO DO SOMETHING WIH BACKGROUND SAVING AND BACF SETTINGS

'BACKED:
'ALLOW TO SAVE BG

'RAM$9000..$9FFF 4KIB LOADED USER'S CHARACTERS
'RAM$A000...$DFDC? 16348B LOADED USER'S BACKGROUND

'RAM$DFDE..$DFDF 2B TEMPORARY FILE SIGNATURE
'RAM$DFE0..$DFFF 32B LOADED USER'S PALETTES

'PRAM$E000 CHARAZ
'PRAM$E001 CHARAT
'PRAM$E002..E005 LASTTIME
'PRAM$E006 PALF
'PRAM$E007 CARF
'PRAM$E008 BACF
'PRAM$E009 CARE
'PRAM$E00A PALE
'PRAM$E00B COLE
'PRAM$E00C EDIE
'PRAM$E00D FIRE
'PRAM$E00E..$E00F CHAX
'PRAN$E010..$E011 CHAY
'PRAM$E012..$E013 BACX
'PRAM$E014..$E015 BACY
'PRAM$E016 BACM
'PRAM$E017 BACH
'PRAM$E018 BACV
'PRAM$E019 BACA



'ROM(1):
'UI PALETTE

'ROM(2):
'CHR#0..63 UI AND PARTIAL FONT
'CHR#64..127 COMPLETE FONT

'ROM(3):
'UI BUTTONS IN BACKGROUND

'ROM(15):
'DEFAULT USER PALETTE

'SPR#159 PALED CURSOR
'SPR#160..163 CHARA LIST SELECTED CHARA CURSOR



'=========================LAYOUT:

'USED TO DETECT IF THE LAYOUT HAS CHANGED
GLOBAL SHOWNW,SHOWNH,RESIZED

'USED TO INDIQUATE A TALL BOTTOM BAR CAN FIT
GLOBAL TALL,SHORT

'CALL THIS AFTER 'WAIT VBL' AND CHECK VAR 'RESIZED'
SUB CHECKRESIZE
  IF SHOWNW<>SHOWN.W OR SHOWNH<>SHOWN.H-SAFE.B THEN
    RESIZED=-1
    SHOWNW=SHOWN.W : SHOWNH=SHOWN.H-SAFE.B
  ELSE
    RESIZED=0
  END IF
  'FOR CAPTURING PROGRAM ICON
  'SHOWNW=180 : SHOWNH=180-SAFE.B : RESIZED=0
  IF SHOWNH-14*8>18*8 THEN
    TALL=1 : SHORT=0
  ELSE
    TALL=0 : SHORT=1
  END IF
END SUB
CALL CHECKRESIZE : RESIZED=0



'========================GESTURE:

GLOBAL PRESSED,TAPPED,DRAGGED,RELEASED,PRESSEDT,PRESSEDX,PRESSEDY,DRAGGEDX,DRAGGEDY

SUB GESTURE
  TAPPED=0
  RELEASED=0
  IF TAP THEN
    PRESSEDT=TIMER
    PRESSED=-1
    PRESSEDX=TOUCH.X
    PRESSEDY=TOUCH.Y
  ELSE IF NOT TOUCH AND PRESSED AND TIMER-PRESSEDT<=12 THEN
    TAPPED=-1
    PRESSED=0
  ELSE IF NOT TOUCH AND DRAGGED THEN
    RELEASED=-1
    PRESSED=0
    DRAGGED=0
    DRAGGEDX=0
    DRAGGEDY=0
  ELSE IF TOUCH AND (NOT DRAGGED AND (TIMER-PRESSEDT>12 OR LEN(TOUCH.X-PRESSEDX,TOUCH.Y-PRESSEDY)>8)) OR DRAGGED THEN
    DRAGGED=-1
    PRESSED=0
    DRAGGEDX=TOUCH.X-PRESSEDX
    DRAGGEDY=TOUCH.Y-PRESSEDY
  END IF
END SUB



'=========================BOTTOM:

'UI BOTTOM BAR IS DRAWN ON BG#1 FOR FRAME AND BUTTON, TEXT OR ICON ON BG#0

'CURSOR FOR WHERE TO BUILD THE NEXT WIDGET
GLOBAL BOTX,BOTY

'STORE THE MAXIMUM POS FOR BOTTOM DRAG
GLOBAL BOTMAX

'STORE THE HEIGHT OF THE WHOLE BOTTOM BAR
GLOBAL BOTHEIGHT

'POSITION OF THE DRAGGED BOTTOM BAR ON X AXIS IN PIXELS
GLOBAL BOTDRAG

'POSITION OF THE BOTTOM BAR ON Y AXIS IN PIXELS IN SCREEN COORDS
GLOBAL BOTSTART,BOTEND

'POSITION OF THE CHARA LIST
GLOBAL BOTLISTX,BOTLISTY
BOTLISTX=-999 : BOTLISTY=-999

'DELAY BEFORE RE-SLIDE THE CHARA LIST AGAIN
GLOBAL BOTSLIDED

'POSITION OF THE FILES LIST
GLOBAL BOTFILEX,BOTFILEY

'AT WHICH RASTER WE WANT TO SWAP PALETTE FOR THE PALETTE SELECTOR
GLOBAL BOTPAL1,BOTPAL2
BOTPAL1=-1 : BOTPAL2=-1

'A LIST OF WIDGET WITH THE LEFT AND RIGHT BOUNDARIES FOR TOUCH DETECTION
DIM GLOBAL BOTWIDGET(14,3)
  '(I,) ID OF THE WIDGET
  '(,0)= LEFT BOUND IN CELL
  '(,1)= RIGHT BOUND IN CELL
  '(,2)= TOP BOUND IN CELL
  '(,3)= BOTTOM BOUND IN CELL

SUB BOTCLEAR
'DRAW THE BOTTOM UI
'(IN) H BOTTOM BAR HEIGHT IN CELL
  CLS 1 : CLS 0 : FLIP 0,0 : PRIO 0 : FONT 0 : PAL 1
  BOTLISTX=-999 : BOTLISTY=-999
  BG SOURCE ROM(3) : BG 1
  BG FILL 0,0 TO 63,1 CHAR 3
  BG FILL 0,1 TO 63,BOTHEIGHT+CEIL(SAFE.B/8) CHAR 1
  BOTX=0 : BOTY=1 : BOTMAX=0
  FOR B=0 TO UBOUND(BOTWIDGET,1)
    BOTWIDGET(B,0)=-99
    BOTWIDGET(B,1)=-99
  NEXT B
  BOTDRAG=0
  BOTSTART=SHOWNH-(BOTHEIGHT)*8
  BOTEND=BOTSTART+(BOTHEIGHT)*8
END SUB

'SUB BOTJUSTFILL(H)
  'BG FILL 0,0 TO 63,1 CHAR 3
  'BG FILL 0,1 TO 63,1+H CHAR 1
  'BOTX=0 : BOTY=1 : BOTMAX=0
'END SUB

SUB BOTADD(B,T)
'ADD A NEW WIDGET IN THE BOTTOM BAR AT THE CURRENT X,Y CURSOR POSITION
'(IN) T THE TYPE OF THE WIDGET
  BOTWIDGET(B,0)=BOTX : BOTWIDGET(B,2)=BOTY
  H=0
  CALL BOTASSET(BOTX,BOTY,T,H)
  BOTWIDGET(B,1)=BOTX-1 : BOTWIDGET(B,3)=BOTY+H-1
  BOTMAX=MAX(BOTMAX,BOTX-1)
END SUB

SUB BOTASSET(X,Y,T,H)
'DRAW A BOTTOM BAR ASSET
'(IN) X,Y POSITION IN CELL
'(IN) T TYPE OF ASSET
'(OUT) H HEIGHT OF THE ASSET

  BG 1

  'TODO: REMOVE 6,10
  ON T GOTO BA_E64,BA_E54,BA_E44,BA_044,BA_144,BA_244,BA_344,BA_E63,BA_E53,BA_E43,BA_043,BA_143,BA_243,BA_343,BA_A64,BA_A54,BA_A44,BA_A63,BA_A53,BA_A43,BA_F44,BA_E53_L,BA_E53_R,BA_F63,BA_P4,BA_P5,BA_P6,BA_P7,BG_U44,BG_S44,BG_U43,BG_S43,BA_F34,BA_A53_L,BA_A53_R :'0..34

BA_E64: BG COPY 0,0,6,4 TO X,Y : ADD X,6 : H=4 : EXIT SUB
BA_E54: BG COPY 6,0,5,4 TO X,Y : ADD X,5 : H=4 : EXIT SUB
BA_E44: BG COPY 11,0,4,4 TO X,Y : ADD X,4 : H=4 : EXIT SUB

BA_044: PAL 4:BG FILL X,Y TO X+3,Y+3 CHAR 2:ADD X,4:H=4:EXIT SUB
BA_144: PAL 5:BG FILL X,Y TO X+3,Y+3 CHAR 2:ADD X,4:H=4:EXIT SUB
BA_244: PAL 6:BG FILL X,Y TO X+3,Y+3 CHAR 2:ADD X,4:H=4:EXIT SUB
BA_344: PAL 7:BG FILL X,Y TO X+3,Y+3 CHAR 2:ADD X,4:H=4:EXIT SUB

BA_E63: BG COPY 0,4,6,3 TO X,Y : ADD X,6 : H=3 : EXIT SUB
BA_E53: BG COPY 6,4,5,3 TO X,Y : ADD X,5 : H=3 : EXIT SUB
BA_E43: BG COPY 11,4,4,3 TO X,Y : ADD X,4 : H=3 : EXIT SUB

BA_043: PAL 4:BG FILL X,Y TO X+3,Y+2 CHAR 2:ADD X,4:H=3:EXIT SUB
BA_143: PAL 5:BG FILL X,Y TO X+3,Y+2 CHAR 2:ADD X,4:H=3:EXIT SUB
BA_243: PAL 6:BG FILL X,Y TO X+3,Y+2 CHAR 2:ADD X,4:H=3:EXIT SUB
BA_343: PAL 7:BG FILL X,Y TO X+3,Y+2 CHAR 2:ADD X,4:H=3:EXIT SUB

BA_A64: BG COPY 0,7,6,4 TO X,Y : ADD X,6 : H=4 : EXIT SUB
BA_A54: BG COPY 6,7,5,4 TO X,Y : ADD X,5 : H=4 : EXIT SUB
BA_A44: BG COPY 11,7,4,4 TO X,Y : ADD X,4 : H=4 : EXIT SUB
BA_A63: BG COPY 0,11,6,3 TO X,Y : ADD X,6 : H=3 : EXIT SUB
BA_A53: BG COPY 6,11,5,3 TO X,Y : ADD X,5 : H=3 : EXIT SUB
BA_A43: BG COPY 11,11,4,3 TO X,Y : ADD X,4 : H=3 : EXIT SUB

BA_F44: BG COPY 0,14,4,4 TO X,Y : ADD X,4 : H=4 : EXIT SUB

BA_E53_L: BG COPY 6,4,4,3 TO X,Y : ADD X,4 : H=3 : EXIT SUB
BA_E53_R: BG COPY 7,4,4,3 TO X,Y : ADD X,4 : H=3 : EXIT SUB
BA_F63: BG COPY 0,14,6,3 TO X,Y : ADD X,6 : H=3 : EXIT SUB

BA_P4: BG COPY 15,7,4,4 TO X,Y : ADD X,4 : H=4 : EXIT SUB
BA_P5: BG COPY 19,7,4,4 TO X,Y : ADD X,4 : H=4 : EXIT SUB
BA_P6: BG COPY 23,7,4,4 TO X,Y : ADD X,4 : H=4 : EXIT SUB
BA_P7: BG COPY 27,7,4,4 TO X,Y : ADD X,4 : H=4 : EXIT SUB

BG_U44: BG 0 : BG COPY 15,0,4,4 TO X,Y : EXIT SUB
BG_S44: BG 0 : BG COPY 19,0,4,4 TO X,Y : EXIT SUB
BG_U43: BG 0 : BG COPY 15,4,4,3 TO X,Y : EXIT SUB
BG_S43: BG 0 : BG COPY 19,4,4,3 TO X,Y : EXIT SUB

BA_F34: BG COPY 0,14,3,4 TO X,Y : ADD X,3 : H=4 : EXIT SUB

BA_A53_L: BG COPY 6,11,4,3 TO X,Y : ADD X,4 : H=3 : EXIT SUB
BA_A53_R: BG COPY 7,11,4,3 TO X,Y : ADD X,4 : H=3 : EXIT SUB



END SUB

SUB BOTTXT(B,F$,L$)
'PRINT TWO LINES OF TEXT FOR A WIDGET
'(IN) B WIDGET ID
'(IN) F$,L$ THE TWO LINES OF TEXT
  BG 0
  X=BOTWIDGET(B,0)
  Y=BOTWIDGET(B,2)
  TEXT X+1,Y+1,F$
  TEXT X+1,Y+2,L$
END SUB

SUB BOTFRAME(B,T)
  X=BOTWIDGET(B,0)
  Y=BOTWIDGET(B,2)
  H=0
  CALL BOTASSET(X,Y,T,H)
END SUB

SUB BOTTAP(TC,B,CC)
'DETECT WIDGET TAP AND APPLY DRAG
'(OUT) B RETURN THE TAPPED BUTTON
  B=-1
  IF TAPPED AND TC=0 AND PRESSEDY>=BOTSTART AND PRESSEDY<BOTEND THEN
    CX=(TOUCH.X+BOTDRAG)\8
    CY=(TOUCH.Y-BOTSTART)\8
    FOR B=0 TO UBOUND(BOTWIDGET,1)
      IF CX>=BOTWIDGET(B,0) AND CX<=BOTWIDGET(B,1) AND CY>=BOTWIDGET(B,2) AND CY<=BOTWIDGET(B,3) THEN EXIT SUB
    NEXT B
    B=-1
  ELSE IF DRAGGED AND TC=0 AND ABS(DRAGGEDX)>8 AND PRESSEDY>=BOTSTART AND PRESSEDY<BOTEND THEN
    TC=298
  END IF
  IF TOUCH AND TC=298 THEN
    ADD BOTDRAG,PRESSEDX-TOUCH.X
    PRESSEDX=TOUCH.X
    'CLAMP THE DRAG
    M=BOTMAX*8+8-SHOWNW
    IF BOTDRAG<0 OR BOTDRAG>M THEN BOTDRAG=CLAMP(BOTDRAG,0,MAX(0,M))
    SCROLL 1,BOTDRAG,-BOTSTART
    SCROLL 0,BOTDRAG,-BOTSTART
    CALL BOTLISTCURSOR
    CC=-1
  ELSE IF NOT TOUCH AND TC=298 THEN
    TC=0
  END IF
END SUB

SUB BOTADDLIST
'DRAW THE CHARA LIST
  BOTLISTX=BOTX : BOTLISTY=BOTY
  C=64
  FOR Y=0 TO 3
  FOR X=0 TO 15
    CELL BOTX+X,BOTY+Y,C
    INC C
  NEXT X
  NEXT Y
  ADD BOTX,16
  BOTMAX=MAX(BOTMAX,BOTX-1)
  SPRITE 158,BOTLISTX*8-8,BOTSTART+BOTLISTY*8,62
  SPRITE 158 PAL 1
END SUB

SUB BOTLISTCURSOR
  SPRITE 158,BOTLISTX*8-8-INT(BOTDRAG),BOTSTART+BOTLISTY*8+FIRE\8,
END SUB

SUB BOTLIST(TC,CC)
'HANDLE TOUCH ON CHARALIST
'(IN/OUT) TC TOUCH CONSUMED
'(OUT) CC CARE/FIRE AS CHANGED
  CC=0
  IF TAPPED THEN
    X=(TOUCH.X+BOTDRAG)\8-BOTLISTX
    Y=(TOUCH.Y-BOTSTART)\8-BOTLISTY
    IF X<0 OR X>=16 OR Y<0 OR Y>=4 THEN EXIT SUB
    C=CLAMP(X,0,15)+CLAMP(Y,0,3)*16+FIRE
    CALL UPDCARE(C)
    CC=-1
  ELSE IF DRAGGED AND TC=0 AND ABS(DRAGGEDY)>8 AND PRESSEDY>=BOTSTART AND PRESSEDY<BOTEND THEN
    TC=234
  END IF
  IF TOUCH AND TC=234 THEN
    AF=(PRESSEDY-TOUCH.Y)\8
    F=CLAMP(FIRE+AF*16,0,192)
    CALL UPDFIRE(F)
    CALL SETCHARALIST(FIRE)
    ADD PRESSEDY,-AF*8
    CALL BOTLISTCURSOR
    CC=-1
  ELSE IF NOT TOUCH AND TC=234 THEN
    TC=0
  END IF
END SUB

SUB BOTSELLIST
'UPDATE CHARA LIST SELECTED CHARA CURSOR
  C=CARE-FIRE
  IF C<0 OR C>64 THEN
    SPRITE OFF 160 TO 163
    EXIT SUB
  END IF
  X=((C MOD 16)+BOTLISTX)*8-INT(BOTDRAG)
  Y=((C\16)+BOTLISTY)*8+BOTSTART
  SPRITE 150,X-3,Y-3,13
  SPRITE 151,X+3,Y-3,13
  SPRITE 152,X-3,Y+3,13
  SPRITE 153,X+3,Y+3,13
END SUB
SPRITE 150 PAL 3 PRIO 1
SPRITE 151 PAL 3 FLIP 1,0 PRIO 1
SPRITE 152 PAL 3 FLIP 0,1 PRIO 1
SPRITE 153 PAL 3 FLIP 1,1 PRIO 1

SUB BOTDESELLIST
  SPRITE OFF 150 TO 153
END SUB

SUB BOTPAGE
'SHOW A TEMPORARY BOTTOM BAR TO CHOOSE AN EDITOR TOOL
BOTPAGE_DRAW:
  SPRITE OFF
  FLIP 0,0 : PRIO 0 : PAL 1
  'DRAW BOTTOM BAR FRAME AND BUTTONS
  BG 1 : CLS 1 : BG SOURCE ROM(3)
  CALL BOTCLEAR
  'FIRST ROW
  CALL BOTADD(0,0)
  CALL BOTADD(1,0)
  CALL BOTADD(2,0)
  'DRAW BOTTOM BAR LABELS IN BUTTON
  BG 0 : CLS 0 : FONT 0
  CALL BOTTXT(0,"CHAR","EDIT")
  CALL BOTTXT(1,"PALE","EDIT")
  CALL BOTTXT(2,"BACK","EDIT")
  BOTSTART=SHOWNH-(BOTHEIGHT)*8
  TC=0 : BT=-1 : CC=-1
  DO
    CALL GESTURE
    CALL BOTTAP(TC,BT,CC)
    IF BT>=0 THEN
      CALL UPDEDIE(BT)
      WAIT VBL
      EXIT SUB
    END IF
    WAIT VBL
    CALL CHECKRESIZE : IF RESIZED THEN GOTO BOTPAGE_DRAW
  LOOP
END SUB

SUB BOTPAL
'DRAW A TEMPORARY BOTTOM BAR TO CHOOSE A PALETTE
'DO NOT HANDLE TOUCH
  SPRITE OFF
  CALL BOTCLEAR
  'FIRST ROW
  CALL BOTADD(0,2)
  CALL BOTADD(1,24)
  CALL BOTADD(2,25)
  CALL BOTADD(3,26)
  CALL BOTADD(4,27)
  'SECOND ROW
  ADD BOTY,4 : BOTX=0
  CALL BOTADD(9,20)
  CALL BOTADD(5,24)
  CALL BOTADD(6,25)
  CALL BOTADD(7,26)
  CALL BOTADD(8,27)
  'BTN LABEL
  CALL BOTTXT(0,"BA","CK")
  PAL 3 : CALL BOTTXT(9,"PA","@"+STR$(PALE))
  FOR I=1 TO 8 : CALL BOTFRAME(I,28) : NEXT I
  CALL BOTFRAME(PALE+1,28)
  'ENABLE PALETTE SWAP FOR BOTH ROWS
  BOTPAL1=BOTSTART+8
  BOTPAL2=BOTPAL1+32
END SUB

SUB BOTPAL_R
'WILL SWAP COLORS TO SHOW USER'S ONE ON PALETTE 4..7
  IF RASTER=BOTPAL1 THEN

'TODO: THIS IS WEIRD
    'COPY $DFE0,16 TO $FF0F
    COPY $DFE0,16 TO $FF10
  ELSE IF RASTER=BOTPAL2 THEN
    'COPY $DFEF,16 TO $FF0F
    COPY $DFF0,16 TO $FF10
  END IF
END SUB

'HOLD VALUES FOR THE RAINFALL EFFECT
GLOBAL RAINDIR,RAINDELAY,RAINCOL
RAINDIR=1 : RAINDELAY=6 : RAINCOL=50

SUB RAIN_V
'APPLY THE RAINFALL EFFECT
  IF RAINDIR=0 THEN EXIT SUB
  DEC RAINDELAY
  IF RAINDELAY>0 THEN EXIT SUB
  RAINDELAY=6
  'C=COLOR(2,3)
  'IF RAINCOL<46 OR RAINCOL>54 THEN EXIT SUB
  ADD RAINCOL,RAINDIR
  PALETTE 2,,,,RAINCOL
  IF RAINCOL=46 OR RAINCOL=54 THEN RAINDIR=-RAINDIR
END SUB




'========================PALETTE:

GLOBAL PALE,COLE

GLOBAL PALED_RD,PALED_RS

'THE CURRENT SELECTED USER PALETTE
PALE=0

'THE CURRENT SELECTED COLOR INDEX FROM THE USER PALETTE
COLE=1

'STORE THE LOADED USER PALETTES
DIM GLOBAL USERPALE(7,3)

'STORE AT WHICH CELL COLUMN, THE NEXT COLOR IS SET FOR THE COLOR SELECTOR
DIM PALEDCOL(3)

SUB SETPALETTE(P)
'SELECT A USER PALETTE TO USE WITHIN THE EDITOR
'(IN) P THE LOADED USER'S PALETTTE 0..7
  A=$DFE0+P*4
  COPY A,4 TO $FF00
  PALETTE 4,,,PEEK(A) AND $3F,
  PALETTE 5,,,PEEK(A+1) AND $3F,
  PALETTE 6,,,PEEK(A+2) AND $3F,
  PALETTE 7,,,PEEK(A+3) AND $3F,
END SUB

SUB SETCOLOR(P,C,V)
'CHANGE ONE USER COLOR FOR THE CURRENT USER'S PALETTE
'(IN) P PALETTE INDEX
'(IN) C COLOR INDEX
'(IN) V ONE OF THE 64 POSSIBLE COLORS
  A=$DFE0+P*4
  POKE A+C,V
  PALETTE 4+C,,,PEEK(A+C),
END SUB



'=====================CHARACTER:

GLOBAL CARE,FIRE,CHAX,CHAY

'THE CURRENT EDITOR USER'S CHARACTER
CARE=1

'THE CURRENT FIRST CHARA NUM IF THE CHARA LIST
FIRE=0

'CANVAS PAN POSITION IN PIXELS FOR SCROLL COMMAND
CHAX=-9999 : CHAY=-9999

SUB CHARACOPY(A,S,C,B,D)
'COPY SOME CHARA FROM MEMORY TO MEMORY
'(IN) A SRC BASE ADDRESS
'(IN) S SRC CHARA INDEX
'(IN) C CHARA COUNT TO COPY
'(IN) B DST BASE ADDRESS
'(IN) D DST CHARA INDEX
  COPY A+S*16,C*16 TO B+D*16
END SUB

SUB PIXELTOCELL(A,C,X,Y,S)
'CONVERT CHARA PIXEL TO BG CELL, ROW BY ROW
'(IN) A BASE ADDRESS
'(IN) C SOURCE CHAR INDEX
'(IN) X,Y DEST CELL COORDS
'(IN) S THE FIRST Y/4 LINE TO REDRAW
  'CHARA ADDRESS
  R=A+C*16+S
  FOR I=S TO 7 STEP 4
    FOR J=7 TO 0 STEP -1
      CELL X+J,Y+I,(PEEK(R) AND 1)+(PEEK(R+8) AND 1)*2
      ROR R,1
      ROR R+8,1
    NEXT J
    R=R+4
  NEXT I
END SUB

SUB PIXELTODOUBLECELL(A,C,X,Y,S)
'SQME AS PIXELTOCELL WITH DOUBLE CELL, A.K.A.: ZOOM X2
  R=A+C*16+S
  FOR I=S TO 7 STEP 4
    FOR J=7 TO 0 STEP -1
      XX=X+J*2 : YY=Y+I*2
      BG FILL XX,YY TO XX+1,YY+1 CHAR (PEEK(R) AND 1)+(PEEK(R+8) AND 1)*2
      ROR R,1
      ROR R+8,1
    NEXT J
    R=R+4
  NEXT I
END SUB

SUB CHARAPSET(A,C,X,Y,V)
'SET A PIXEL OF A CHARA AT A MEMORY LOCATION
'(IN) A BASE ADDRESS
'(IN) C DEST CHAR INDEX
'(IN) X,Y SOURCE CELL COORDS
'(IN) V COLOR VALUE
'CHAR ADDRESS
R=A+C*16+(Y AND 7)
'LOW OR HIGH COLOR BIT
B=V AND 1
FOR I=0 TO 1
ROL R,1+X
POKE R,(PEEK(R) AND 254) OR B
ROR R,1+X
R=R+8
B=(V AND 2)\2
NEXT I
END SUB

SUB SETCHARALIST(F)
'COPY THE USER'S CHARA FOR THE CHARA LIST
'(IN) F FIRST CHARA NUM
  CALL CHARACOPY($9000,F,64,$8000,64)
END SUB


'=====================BACKGROUND:

'SCROLL POSITION OF THE BACKGROUND EDITOR
GLOBAL BACX,BACY
BACX=-9999 : BACY=-9999

'THE CURRENT MODIFICATOR FLAG FOR BACKGROUND PAINTING TOOLS
GLOBAL BACM,BACA,BACH,BACV
BACM=%0000 : BACA=%000000
BACH=0 : BACV=0

'16348 BYTES CAN LOADED INTO MEMORY FOR BACKGROUND DATA, SO 90X90 OF CELLS DATA.
'THIS EDITOR ALLOW TO EDIT MULTIPLE LAYERS AT THE SAME TIMES.
'ALSO BG SOURCE DATA CAN CAME FROM ONE OR MORE FILES.

'FOR EACH BACKGOUND FILE LOADED, KEEP ADDRESS IN MEMORY, SIZE IN BYTES, WIDTH AND HEIGHT IN CELLS
DIM GLOBAL BGADDR(3),BGSIZE(3),BGW(3),BGH(3)

'FOR EACH EDITOR LAYERS, STORE WHICH LOADED FILES TO USE AS SOURCE, WIDTH AND HEIGHT IN CELLS, CURRENT SHOW POSITION OF THE BG
DIM GLOBAL LAYERBG(3),LAYERW(3),LAYERH(3),LAYERX(3),LAYERY(3)
  'LAYERX AND LAYERY ARE RELATIVE TO THE BACX AND BACY

'THE MAX WIDTH AND HEIGHT FOR ALL LAYERS IN CELL COORDS.
GLOBAL LAYERMW,LAYERMH

SUB CLEARBG
  FOR I=0 TO 3
    BGADDR(I)=0 : BGSIZE(I)=0
    BGW(I)=0 : BGH(I)=0
    LAYERBG(I)=-1
    LAYERW(I)=0 : LAYERH(I)=0
    LAYERX(I)=0 : LAYERY(I)=0
  NEXT I
END SUB

SUB TRIMBGBOTTOMRIGHT(I)
  W=BGW(I) : H=BGH(I) : U=-1 : V=-1
  BG SOURCE BGADDR(I),W,H
  TRACE "BEFORE",W,H
  IF W<1 OR H<1 THEN EXIT SUB
  ADD W,-1 : ADD H,-1
  WHILE V OR V
    IF V THEN
      FOR X=0 TO W
        IF MCELL.C(X,H)>0 OR MCELL.A(X,H)>0 THEN
          V=0
          GOTO TRIM_1
        END IF
      NEXT X
    END IF
TRIM_1:
    IF U THEN
      FOR Y=0 TO H-1
        IF MCELL.C(W,Y)>0 OR MCELL.A(W,Y)>0 THEN
          U=0
          GOTO TRIM_2
        END IF
      NEXT Y
    END IF
 TRIM_2:
    ADD W,U : ADD H,V
  WEND
  ADD W,1 : ADD H,1
  TRACE "AFTER",W,H
END SUB


'===========================FILE:

'THE CURRENT SELECTED FILE NUM
FINE=0

'FILE NUMBER FOR PALETTES, CHARACTERS AND BACKGROUND
GLOBAL PALF,CARF,BACF
PALF=1
CARF=2
BACF=3

'INDIQUATE STATE CHANGED OF DATA LINKED TO FILE
CHANGED=0
LOADED=0
SAVED=0

'COMPUTED RASTER VALUES TO CHANGE PALETTE WITH FILED PAGE.
GLOBAL FILEON_R,FILEOFF_R

SUB LOADPALETTE(F)
'LOAD USER PALETTE FROM A FILE
'(IN) F THE FILE TO LOAD THE PALETTE FROM
  IF FSIZE(F)>0 THEN
    LOAD F,$DFE0,32
  ELSE
    COPY ROM(13),32 TO $DFE0
  END IF
  CALL UPDPALF(F)
END SUB

SUB LOADCHARACTER(F)
'LOAD USER CHARACTER FROM A FILE
  IF FSIZE(F)>0 THEN
    LOAD F,$9000,$1000
  ELSE
    FILL $9000,$1000
  END IF
  CALL UPDCARF(F)
END SUB

SUB LOADBGIMPL(ERR,B,F,A,W,H)
'IMPLEMENTATION OF BG LOADING
'(OUT) ERR
'(IN) B BGS ARRAY INDEX 0..3
'(IN) F FILE NUMBER
'(IN) A MEMORY ADDR WHERE TO LOAD
'(OUT) W,H BG LOADED DIMENSION
  ERR=-1
  LOAD F,A
  IF PEEKW(A)<>0 THEN EXIT SUB
  'GET DIMENSION
  W=PEEK(A+2) : H=PEEK(A+3)
  IF W=0 OR H=0 THEN EXIT SUB
  BGADDR(B)=A
  BGSIZE(B)=FSIZE(F)
  BGW(B)=W : BGH(B)=H
  ERR=0
END SUB

SUB LOADBACKGROUND(F)
'LOAD USER BACKGROUND FROM A FILE, ERASE OTHER LOADED BACKGROUNDS LAYERS
  IF FSIZE(F)>$3FDC THEN
    MESSAGE "FILE TOO LARGE"
  ELSE IF FSIZE(F)>4 THEN
    CALL CLEARBG
    ERR=0 : W=0 : H=0
    CALL LOADBGIMPL(ERR,0,F,$A000,W,H)
    IF ERR THEN
      MESSAGE "INCOMPATIBLE FORMAT"
      EXIT SUB
    END IF
    LAYERBG(3)=0
    LAYERW(3)=W : LAYERH(3)=H
    LAYERMW=W : LAYERMH=H
  'ELSE
    'FILL $A000,$3FDC
  END IF
END SUB

SUB ADDBACKGROUND(F)
'LOAD USER BACKGROUND FROM A FILE, KEEP PREVIOUS BACKGROUND
  'CHECK FOR LOADED BG AND AVAILABLE ADDR AND SPACE
  ADDR=0 : B=-1
  FOR I=0 TO 3
    IF BGADDR(I)>ADDR THEN ADDR=BGADDR(I)+BGSIZE(I)
    IF BGADDR(I)=0 AND B=-1 THEN B=I
  NEXT I
  FREE=$3FDC-ADDR+$A000
  IF FSIZE(F)>FREE THEN
    MESSAGE "FILE TOO LARGE"
  ELSE IF FSIZE(F)>4 THEN
    ERR=0 : W=0 : H=0
    CALL LOADBGIMPL(ERR,B,F,ADDR,W,H)
    L=3-B
    'AUTO SETUP A LAYER IF NOT USED
    IF LAYERBG(L)=-1 THEN
      LAYERBG(L)=B
      LAYERW(L)=W : LAYERH(L)=H
      LAYERMW=MAX(LAYERMW,W) : LAYERMH=MAX(LAYERMH,H)
    END IF
  END IF
END SUB

SUB SAVEPALETTE(F)
'SAVE USER PALETTE TO A FILE
  N$=FILE$(F)
  IF N$="" THEN N$="PALETTE"
  SAVE F,N$,$DFE0,32
  CALL UPDPALF(F)
END SUB

SUB SAVECHARACTER(F)
'SAVE USER CHARACTER TO A FILE
  N$=FILE$(F)
  IF N$="" THEN N$="CHARACTER"
  SAVE F,N$,$9000,$1000
  CALL UPDCARF(F)
END SUB

SUB SAVEBACKGROUND(B,F)
'SAVE USE BACKGROUND TO A FILE
  ERR=-1
  IF BGADDR(B)<=0 OR BGSIZE(B)<=0 OR BGW(B)<=0 OR BGH(B)<=0 THEN EXIT SUB
  N$=FILE$(F)
  IF N$="" THEN N$="BACKGROUND"
  POKEW BGADDR(B),0
  POKE BGADDR(B)+2,BGW(B)
  POKE BGADDR(B)+3,BGH(B)
  SAVE F,N$,BGADDR(B),BGSIZE(B)
  ERR=0
END SUB


'=======================SETTINGS:
'STORE SOME SETTINGS IN PERSISTENT RAM

'LAST EDITOR
'=0 CHARED
'=1 PALED
'=2 BACKED
GLOBAL EDIE
EDIE=0

'ZOOM LEVEL FOR CHARA EDITOR
GLOBAL CHARAZ
CHARAZ=1
E=PEEK($E000)
IF E>0 AND E<3 THEN CHARAZ=E
SUB UPDCHARAZ(V)
  IF V<1 OR V>2 THEN EXIT SUB
  CHARAZ=V
  POKE $E000,V
END SUB

'PAINT TOOL FOR CHARA EDITOR
GLOBAL CHARAT
CHARAT=0
E=PEEK($E001)
IF E>=0 AND E<3 THEN CHARAT=E
SUB UPDCHARAT(V)
  IF V<0 OR V>2 THEN EXIT SUB
  CHARAT=V
  POKE $E001,V
END SUB

'THE TIME WHEN LAST FILE ACTION WAS MADE
'USED TO AUTOMATICLY SET THE LAST FILES NUM FOR A PROGRAM ACCESSED A SHORT TIME AGO
E=TIMER\60-PEEKL($E002)
IF E>0 AND E<60*10 THEN
  PALF=PEEK($E006)
  CARF=PEEK($E007)
  BACF=PEEK($E008)
  CARE=PEEK($E009)
  PALE=PEEK($E00A)
  COLE=PEEK($E00B)
  EDIE=PEEK($E00C)
  FIRE=PEEK($E00D)
  CHAX=PEEKW($E00E)
  CHAY=PEEKW($E010)
  BACX=PEEKW($E012)
  BACY=PEEKW($E014)
  BACM=PEEK($E016)
  BACH=PEEK($E017)
  BACV=PEEK($E018)
  BACA=PEEK($E019)
ELSE
  POKE $E006,PALF
  POKE $E007,CARF
  POKE $E008,BACF
  POKE $E009,CARE
  POKE $E00A,PALE
  POKE $E00B,COLE
  POKE $E00C,EDIE
  POKE $E00D,FIRE
  POKE $E016,BACM
  POKE $E017,BACH
  POKE $E018,BACV
  POKE $E019,BACA
END IF

SUB UPDPALF(F)
  PALF=F
  POKE $E006,PALF
  POKEL $E002,TIMER\60
END SUB

SUB UPDCARF(F)
  CARF=F
  POKE $E007,CARF
  POKEL $E002,TIMER\60
END SUB

SUB UPDBACF(F)
  BACF=F
  POKE $E008,BACF
  POKEL $E002,TIMER\60
END SUB

SUB UPDCARE(C)
  CARE=C
  POKE $E009,CARE
  POKEL $E002,TIMER\60
END SUB

SUB UPDPALE(P)
  PALE=P
  POKE $E00A,PALE
  POKEL $E002,TIMER\60
END SUB

SUB UPDCOLE(C)
  COLE=C
  POKE $E00B,COLE
  POKEL $E002,TIMER\60
END SUB

SUB UPDEDIE(E)
  EDIE=E
  POKE $E00C,EDIE
  POKEL $E002,TIMER\60
END SUB

SUB UPDFIRE(E)
  FIRE=E
  POKE $E00D,FIRE
  POKEL $E002,TIMER\60
END SUB

SUB UPDCHAX(X)
  CHAX=X
  POKEW $E00E,CHAX
  POKEL $E002,TIMER\60
END SUB

SUB UPDCHAY(Y)
  CHAY=Y
  POKEW $E010,CHAY
  POKEL $E002,TIMER\60
END SUB

SUB UPDBACX(X)
  BACX=X
  POKEW $E012,BACX
  POKEL $E002,TIMER\60
END SUB

SUB UPDBACY(Y)
  BACY=Y
  POKEW $E014,BACY
  POKEL $E002,TIMER\60
END SUB

SUB UPDBACM(M)
  BACM=M
  POKE $E016,BACM
  POKEL $E002,TIMER\60
END SUB

SUB UPDBACH(H)
  BACH=H
  POKE $E017,BACH
  POKEL $E002,TIMER\60
END SUB

SUB UPDBACV(V)
  BACV=V
  POKE $E018,BACV
  POKEL $E002,TIMER\60
END SUB

SUB UPDBACA(A)
  BACA=A
  POKE $E019,BACA
  POKEL $E002,TIMER\60
END SUB



'===========================MAIN:



FILES
CALL LOADPALETTE(PALF)
CALL LOADCHARACTER(CARF)
CALL LOADBACKGROUND(BACF)
'CALL LOADBACKGROUND(4)
CALL ADDBACKGROUND(4)

'CALL TRIMBGBOTTOMRIGHT(0)

'THE CURRENT BACKED TOOLBAR
BACKEDBAR=0
'THE CURRENT BACKED TOOL
BACKEDTOOL=0

'THE CURRENT BOTTOM BAR IN PALED
PALEDBAR=0

'THE CURRENT BOTTOM BAR IN CHARED
CHAREDBAR=0

ON EDIE GOTO CHARED,PALED,BACKED

'=========================CHARED:

'A CHARA EDITOR

'PAL#0 USER'S CURRENT PALETTE
'PAL#1,2,3 UI
'PAL#4,5,6,7 UI WITH USER'S CURRENT PALETTE COLORS

'BG#3 EDITED CHARA WITH BG CELLS FOR SHOW CHARA PIXELS
'BG#2 EDITED CHARA BORDER AROUND BG#3
'BG#1 BOTTOM BAR UI FRAME
'BG#0 BOTTOM BAR UI TEXT

'CHR#0..63 UI
'CHR#64..127 USER'S CHAR SHOW IN THE CHARA LIST IN THE BOTTOM BAR

SUB CHARED_V
  'SCROLL 1,BOTDRAG,-BOTSTART
  'SCROLL 0,BOTDRAG,-BOTSTART
  CALL RAIN_V
END SUB

SUB CHARED_R
  IF RASTER=0 THEN
    SYSTEM 2,0
  ELSE IF RASTER=BOTSTART THEN
    SYSTEM 2,1
    'IF SHORT THEN SCROLL 0,BOTDRAG,-BOTSTART+4
  ELSE IF RASTER=BOTSTART+32 THEN
    SCROLL 0,BOTDRAG,-BOTSTART
  END IF
  CALL BOTPAL_R
END SUB

CHARED:
'A TOOL THAT ALLOW USER TO EDIT THE PIXEL COLOR OF THE CURRENT SELECTED CHARA.
  'CLEAR FROM PREVIOUS PAGE, MAY INTERFERS WITH CURRENT FRAME
  ON RASTER OFF
  ON VBL OFF
  SPRITE OFF
  'RELOAD UI
  COPY ROM(2),$400 TO $8000
  FILL $FF00,32 :'BLACK SCREEN FOR TRANSITION
  'SETUP BOTTOM SIZE
  BOTHEIGHT=11+TALL*3
  CALL BOTCLEAR
  SCROLL 1,BOTDRAG,-BOTSTART
  SCROLL 0,BOTDRAG,-BOTSTART
  ON VBL CALL CHARED_V : 'CALL CHARED_V
  ON RASTER CALL CHARED_R
  GOSUB CHARED_FRAME
  ON CHARAZ-1 GOSUB CHARED_SINGLE,CHARED_DOUBLE
  GOSUB CHARED_INITPAN
  IF CHAREDBAR=0 THEN
    GOSUB CHARED_BOT
    CALL BOTSELLIST
    CALL SETCHARALIST(FIRE)
  ELSE IF CHAREDBAR=1 THEN
    CALL BOTPAL
  END IF
  COPY ROM(1),32 TO $FF00 :'COLORIZE UI
  CALL SETPALETTE(PALE)

  BT=-1 :'TAPPED BTN
  VX=-1 : VY=-1 :'PREVIOUS PAINT POSITION
  TC=0 :'TOUCH CONSUMED
  CC=-1 :'SELECTED CHARA AS CHANGED

CHARED_LOOP:
DO
  ON CHAREDBAR GOTO CHARED_MAIN,CHARED_PALCHOOSE

CHARED_MAIN:
  CALL GESTURE
  'DETECT EDITED CHARA CHANGED
  CALL BOTLIST(TC,CC)
  'DETECT BUTTON TAP AND BOTTOM BAR DRAG
  CALL BOTTAP(TC,BT,CC)
  'FIX A FRAME DELAY BETWEEN BG SCROLL AND CURSOR SPRITE POSITION
  IF CC THEN CALL CHARED_V
  IF CC THEN GOSUB CHARED_SEL
  IF BT>=0 THEN ON BT GOTO CHARED_LOOP,CHARED_COLE,CHARED_COLE,CHARED_COLE,CHARED_COLE,CHARED_UNDO,CHARED_PALE,CHARED_PAGE,CHARED_ZOOM,CHARED_MORE,CHARED_FILE,CHARED_LOOP
  'DETECT PIXELS PAINTING
  GOSUB CHARED_PAINTING
  'DETECT MAIN DRAG
  GOSUB CHARED_DRAG

CHARED_CONTINUE:
  WAIT VBL
  CALL CHECKRESIZE : IF RESIZED THEN GOTO CHARED
LOOP

CHARED_PALCHOOSE:
  CALL GESTURE
  'DETECT BUTTON TAP AND BOTTOM BAR DRAG
  CALL BOTTAP(TC,BT,CC)
  IF BT=0 THEN GOTO CHARED_UNPALE
  IF BT>=1 AND BT<=8 THEN
    CALL BOTFRAME(PALE+1,28)
    CALL UPDPALE(BT-1)
    CALL BOTFRAME(PALE+1,29)
    PAL 3 : CALL BOTTXT(9,"PA","@"+STR$(PALE))
    CALL SETPALETTE(PALE)
  END IF
  'DETECT MAIN DRAG
  GOSUB CHARED_DRAG
  GOTO CHARED_CONTINUE

CHARED_BOT:
'REDRAW THE BOTTOM BAR TO DRAW
  'DRAW BOTTOM BAR FRAME AND BUTTONS :'FIRST ROW
  CALL BOTADD(0,1+SHORT*7)
  CALL BOTADD(1,3+SHORT*7) : CALL BOTFRAME(1,28+SHORT*2)
  CALL BOTADD(2,4+SHORT*7) : CALL BOTFRAME(2,28+SHORT*2)
  CALL BOTADD(3,5+SHORT*7) : CALL BOTFRAME(3,28+SHORT*2)
  CALL BOTADD(4,6+SHORT*7) : CALL BOTFRAME(4,28+SHORT*2)
  CALL BOTADD(5,2+SHORT*7)
  CALL BOTFRAME(COLE+1,29+SHORT*2)
  'SECOND ROW
  ADD BOTY,3+TALL+TALL : BOTX=0
  CALL BOTADD(6,2)
  INC BOTX
  PAL 0 : CALL BOTADDLIST
  CALL BOTADD(11,20)
  'THIRD ROW
  ADD BOTY,4+TALL : BOTX=0
  CALL BOTADD(7,7)
  INC BOTX
  T=(CHARAZ-1)*10+7 : CALL BOTADD(8,T)
  CALL BOTADD(9,7)
  CALL BOTADD(10,7)
  'DRAW BOTTOM BAR LABELS IN BUTTON
  PAL 1
  CALL BOTTXT(0,"PEN","")
  CALL BOTTXT(5,"UN","DO")
  CALL BOTTXT(6,"PA","@"+STR$(PALE))
  CALL BOTTXT(7,"PAGE","")
  CALL BOTTXT(8,"ZOOM","")
  CALL BOTTXT(9,"MORE","")
  CALL BOTTXT(10,"FILE","")
  PAL 3
  CALL BOTTXT(11,"C:",RIGHT$("0"+HEX$(CARE),2))
  'COMPUTE BOTTOM BAR POSITION

  BOTDRAG=CLAMP(BOTDRAG,0,MAX(0,BOTMAX*8+8-SHOWNW))
  RETURN

CHARED_FRAME:
'REDRAW THE UPPER SCREEN, THE EDITABLE CHARA PIXELS
  BG 2 : CLS 2 : PAL 1
  BG FILL 0,0 TO 63,63 CHAR 2
  S=8*CHARAZ : M=S-1
  BG FILL 0,0 TO M,M CHAR 0
  BG FILL S,0 TO S,M CHAR 10
  BG FILL 0,S TO M,S CHAR 11
  CELL S,S,12
  FLIP 1,0
  BG FILL -1,0 TO -1,S CHAR 10
  CELL -1,S,12
  FLIP 0,1
  BG FILL 0,-1 TO S,-1 CHAR 11
  CELL S,-1,12
  FLIP 1,1
  CELL -1,-1,12
  RETURN

CHARED_REFRESH:
'CHANGES HAS BEEN MADE ON THE MEMORY FOR THE EDITED CHARA
  IF CARE>=FIRE AND CARE<FIRE+64 THEN CALL CHARACOPY($9000,CARE,1,$8000,64+CARE-FIRE)
  ON CHARAZ-1 GOTO CHARED_SINGLE,CHARED_DOUBLE

CHARED_SINGLE:
  BG 3 : PAL 0 : FLIP 0,0 : CLS 3
  FOR R=0 TO 3
    CALL PIXELTOCELL($9000,CARE,0,0,R)
  NEXT R
  RETURN

CHARED_DOUBLE:
  BG 3 : PAL 0 : FLIP 0,0 : CLS 3
  FOR R=0 TO 3
    CALL PIXELTODOUBLECELL($9000,CARE,0,0,R)
  NEXT R
  RETURN

CHARED_INITPAN:
'WILL SCROLL THE CANVAS AT PREVIOUS SAVED POSITION OR CENTER IT.
  IF CHAX=-9999 OR CHAY=-9999 THEN
    GOTO CHARED_CENTER
  ELSE
    GOTO CHARED_LIMIT
  END IF

CHARED_CENTER:
'CENTER THE CANVAS SCREEN
  CALL UPDCHAX((SHOWNW-(8*8*CHARAZ))/2)
  CALL UPDCHAY((BOTSTART-(8*8*CHARAZ))/2)
  GOTO CHARED_LIMIT

CHARED_SEL:
'REFRESH SELECTED CHARA
  'CURSOR
  CALL BOTSELLIST
  'MAIN PIXELS
  ON CHARAZ-1 GOSUB CHARED_SINGLE,CHARED_DOUBLE
  'CHARA NUMBER
  BG 0 : PAL 3 : FLIP 0,0 : PRIO 0
  CALL BOTTXT(11,"C:",RIGHT$("0"+HEX$(CARE),2))
  RETURN

CHARED_DRAG:
'PAN THE CAN AS
  'CHAX,CHAY MAIN SCROLL
  'OX,OY MAIN SCROLL AT DRAG START
  'DX,DY DISTANCE TO APPLY TO MAIN SCROLL
  IF TC<>0 AND TC<>341 THEN RETURN
  IF TC=341 AND NOT TOUCH THEN TC=0
  IF NOT TOUCH THEN RETURN
  IF PRESSED AND PRESSEDY<BOTSTART THEN
    TC=341
    OX=CHAX : OY=CHAY
  END IF
  IF TC<>341 THEN RETURN
  DX=INT(TOUCH.X-PRESSEDX) : DY=INT(TOUCH.Y-PRESSEDY)
  CALL UPDCHAX(OX+DX) : CALL UPDCHAY(OY+DY)
  GOTO CHARED_LIMIT

CHARED_LIMIT:
  'LIMIT THE CANVAS DRAG
  IF CHAX+16*CHARAZ>=SHOWNW/2 THEN CALL UPDCHAX(SHOWNW/2-16*CHARAZ)
  IF CHAX+48*CHARAZ<=SHOWNW/2 THEN CALL UPDCHAX(SHOWNW/2-48*CHARAZ)
  IF CHAY+16*CHARAZ>=BOTSTART/2 THEN CALL UPDCHAY(BOTSTART/2-16*CHARAZ)
  IF CHAY+48*CHARAZ<=BOTSTART/2 THEN CALL UPDCHAY(BOTSTART/2-48*CHARAZ)
  SCROLL 2,-CHAX,-CHAY
  SCROLL 3,-CHAX,-CHAY
  RETURN

CHARED_PAINTING:
'HANDLE PAINTING ON MAIN INSIDE CHARA'S EDITABLE PIXELS
'ONLY PAINT WHEN TOUCH IS ON THE PIXELS AND ONLY ONE TIME PER PIXEL
  IF TC=710 AND NOT TOUCH THEN TC=0
  IF TC<>0 AND TC<>710 THEN RETURN
  PX=(TOUCH.X-CHAX)\1 : PY=(TOUCH.Y-CHAY)\1
  CS=8*8*CHARAZ
  IF TAP AND PX>=0 AND PX<CS AND PY>=0 AND PY<CS THEN TC=710
  IF TAP THEN VX=-1
  IF TC<>710 OR NOT TOUCH THEN RETURN
  X=PX\(8*CHARAZ) : Y=PY\(8*CHARAZ)
  IF X<0 OR X>7 OR Y<0 OR Y>7 THEN RETURN
  IF X=VX AND Y=VY THEN RETURN
  VX=X : VY=Y
  ON CHARAT GOTO CHARED_PEN

CHARED_PEN:
  'FOR THE CHARA LIST
  'CALL CHARAPSET($8000,64+CARE,X,Y,COLE)
  'FOR
  CALL CHARAPSET($9000,CARE,X,Y,COLE)
  'VX=X : VY=Y
  GOTO CHARED_REFRESH
  'RETURN

CHARED_COLE:
'SWITCH TO A NEW COLOR TO PAINT WITH
  CALL BOTFRAME(COLE+1,28+SHORT*2)
  CALL UPDCOLE(BT-1)
  CALL BOTFRAME(BT,29+SHORT*2)
  GOTO CHARED_CONTINUE

CHARED_UNDO:
  MESSAGE "NOT IMPLEMENTED"
  GOTO CHARED_LOOP

CHARED_PALE:
  CHAREDBAR=1
  CALL BOTPAL
  CALL BOTFRAME(PALE+1,29)
  GOTO CHARED_CONTINUE

CHARED_UNPALE:
  CHAREDBAR=0
  CALL BOTCLEAR
  GOSUB CHARED_BOT
  BOTPAL1=-1 : BOTPAL2=-1
  CALL BOTSELLIST
  CALL SETCHARALIST(FIRE)
  COPY ROM(1),32 TO $FF00 :'COLORIZE UI
  CALL SETPALETTE(PALE)
  GOTO CHARED_CONTINUE

CHARED_PAGE:
  CALL BOTPAGE
  ON EDIE GOTO CHARED,PALED,BACKED

CHARED_ZOOM:
  CALL UPDCHARAZ((CHARAZ MOD 2)+1)
  X=BOTWIDGET(8,0) : Y=BOTWIDGET(8,2)
  T=(CHARAZ-1)*10+7 : H=0
  BG 1 : PAL 1 : CALL BOTASSET(X,Y,T,H)
  'GOTO CHARED 'TOO HARDCORE, SHOW A BLACK SCREEN
  GOSUB CHARED_FRAME
  ON CHARAZ-1 GOSUB CHARED_SINGLE,CHARED_DOUBLE
  GOSUB CHARED_INITPAN
  GOTO CHARED_LOOP

CHARED_MORE:
  MESSAGE "NOT IMPLEMENTED"
  GOTO CHARED_LOOP

CHARED_FILE:
  FINE=CARF
  GOSUB FILED
  IF SAVED THEN
    CALL SAVECHARACTER(FINE)
    MESSAGE "CHARACTERS SAVED"
  END IF
  IF LOADED THEN
    CALL LOADCHARACTER(FINE)
    MESSAGE "CHARACTERS LOADED"
  END IF
  GOTO CHARED


'==========================PALED:

'THIS TOOL ALLOW TO CHANGE THE COLORS OF EACH PALETTES

'PAL#0 UI
'PAL#1 UI SELECTED RAINFALL COLORS
'PAL#4,5,6,7 USER'S CURRENT PALETTE COLORS

'BG#3 COLORS SWATCH AND CURRENT SELECTED PALETTES COLORS
'BG#1 BOTTOM BAR UI FRAME
'BG#0 BOTTOM BAR UI TEXT

SUB PALED_V
  CALL RAIN_V
END SUB

SUB PALED_R
  IF RASTER<BOTSTART THEN
    C=INT((RASTER-PALED_RS)/PALED_RD)*4
    WHILE C<0 : ADD C,4 : WEND
    PALETTE 0,MIN(C,63),MIN(C+1,63),MIN(C+2,63),MIN(C+3,63)
  ELSE IF RASTER=BOTSTART THEN
    COPY $DFE0+PALE*4,4 TO $FF00
  END IF
  IF RASTER=0 THEN
    SYSTEM 2,0
    PALETTE 1,,2,3,
  ELSE IF RASTER=BOTSTART+8 THEN
    SYSTEM 2,1
    COPY ROM(1)+4,4 TO $FF04
  END IF
  CALL BOTPAL_R
END SUB

PALED:
'A TOOL THAT ALLOW USER TO EDIT THE 4 COLOR OF EACH 8 PALETTE AVAILABLE.
  ON VBL OFF : ON RASTER OFF : SPRITE OFF
  'RELOAD UI
  COPY ROM(2),$400 TO $8000
  FILL $FF00,32 :'BLACK SCREEN FOR TRANSITION
  CLS
  'SETUP BOTTOM SIZE
  BOTHEIGHT=8+TALL+TALL
  CALL BOTCLEAR
  'PARAMETERS FOR THE RAINFALL EFFECT
  PALED_RT=SAFE.T
  PALED_RD=(BOTSTART-PALED_RT)/64*4
  PALED_RS=SAFE.T
  SCROLL 1,BOTDRAG,-BOTSTART
  SCROLL 0,BOTDRAG,-BOTSTART
  ON VBL CALL PALED_V
  ON RASTER CALL PALED_R
  GOSUB PALED_DISTRIB
  IF PALEDBAR=0 THEN
    GOSUB PALED_BOT
    CALL SETCHARALIST(FIRE)
  ELSE IF PALEDBAR=1 THEN
    CALL BOTPAL
  END IF
  COPY ROM(1),32 TO $FF00 :'COLORIZE UI
  CALL SETPALETTE(PALE)
  IF PALEDBAR=0 THEN GOSUB PALED_NUM

  BT=-1 :'TAPPED BTN
  TC=0 :'TOUCH CONSUMED
  CC=0 :'CHARALIST HAS CHANGED

PALED_LOOP:
DO
  ON PALEDBAR GOTO PALED_MAIN,PALED_PALCHOOSE

PALED_MAIN:
  CALL GESTURE
  CALL BOTLIST(TC,CC)
  'DETECT BUTTON TAP AND BOTTOM BAR DRAG
  CALL BOTTAP(TC,BT,CC)
  IF BT>=0 THEN ON BT GOTO PALED_PALE,PALED_COLE,PALED_COLE,PALED_COLE,PALED_COLE,PALED_LOOP,PALED_PAGE,PALED_FILE
  'DETECT COLOR SELECTION
  GOSUB PALED_SELECT

PALED_CONTINUE:
  WAIT VBL
  CALL CHECKRESIZE : IF RESIZED THEN GOTO PALED
LOOP

PALED_PALCHOOSE:
  CALL GESTURE
  'DETECT BUTTON TAP AND BOTTOM BAR DRAG
  CALL BOTTAP(TC,BT,CC)
  IF BT=0 THEN GOTO PALED_UNPALE
  IF BT>=1 AND BT<=8 THEN
    CALL BOTFRAME(PALE+1,28)
    CALL UPDPALE(BT-1)
    CALL BOTFRAME(PALE+1,29)
    PAL 3 : CALL BOTTXT(9,"PA","@"+STR$(PALE))
    CALL SETPALETTE(PALE)
  END IF
  'DETECT COLOR SELECTION
  GOSUB PALED_SELECT
  GOTO PALED_CONTINUE

PALED_BOT:
'REDRAW THE BOTTOM BAR
  'DRAW BOTTOM BAR FRAME AND BUTTONS :'FIRST ROW
  CALL BOTADD(0,2+SHORT*7)
  CALL BOTADD(1,3+SHORT*7) : CALL BOTFRAME(1,28+SHORT*2)
  CALL BOTADD(2,4+SHORT*7) : CALL BOTFRAME(2,28+SHORT*2)
  CALL BOTADD(3,5+SHORT*7) : CALL BOTFRAME(3,28+SHORT*2)
  CALL BOTADD(4,6+SHORT*7) : CALL BOTFRAME(4,28+SHORT*2)
  CALL BOTFRAME(COLE+1,29+SHORT*2)
  CALL BOTADD(5,20)
  'SECOND ROW
  ADD BOTY,3+TALL+TALL : BOTX=0
  PAL 0 : INC BOTX : CALL BOTADDLIST
  CALL BOTADD(6,2)
  CALL BOTADD(7,2)
  'DRAW BOTTOM BAR LABELS IN BUTTON
  PAL 1
  CALL BOTTXT(6,"PA","GE")
  CALL BOTTXT(7,"FI","LE")
  RETURN

SUB PALED_DISTRIB(T,D)
  IF T<=0 THEN EXIT SUB
  INC D
  DEC T
END SUB

PALED_DISTRIB:
'DISTRIBUTE AND DRAW BLOCKS OF COLORS
  BG 3 : SCROLL 3,0,0 : PAL 0
  FOR D=0 TO 3 : PALEDCOL(D)=0 : NEXT D
  T=CEIL(SHOWNW/8)
  WHILE T>0
    CALL PALED_DISTRIB(T,PALEDCOL(1))
    CALL PALED_DISTRIB(T,PALEDCOL(2))
    CALL PALED_DISTRIB(T,PALEDCOL(0))
    CALL PALED_DISTRIB(T,PALEDCOL(3))
  WEND
  X=0
  FOR C=0 TO 3
    BG FILL X,0 TO 63,63 CHAR C
    ADD X,PALEDCOL(C)
  NEXT C
  RETURN

PALED_SELECT:
'USER HAS SELECTED A COLOR FROM THE BLOCKS
  'PREVIOUS COLOR
  IF TC>0 THEN RETURN
  PC=COLOR(COLE+4,2)
  WHILE TOUCH AND TOUCH.Y<BOTSTART
    'COMPUTE TOUCHED ROW
    R=MAX(0,INT((TOUCH.Y-PALED_RS)/PALED_RD)*4)
    'COMPUTE TOUCHED COL
    X=0
    FOR I=0 TO 3
      C=I
      ADD X,PALEDCOL(I)*8
      IF TOUCH.X<X THEN I=4
    NEXT I
    'COMPUTE COLOR
    C=CLAMP(C+R,0,63)
    'DETECT COLOR CHANGE
    IF C<>PC THEN
      CALL SETCOLOR(PALE,COLE,C)
      GOSUB PALED_NUM
      PC=C
    END IF
    WAIT VBL
  WEND
  RETURN

PALED_PALE:
  PALEDBAR=1
  CALL BOTPAL
  CALL BOTFRAME(PALE+1,29)
  GOTO PALED_CONTINUE

PALED_UNPALE:
  PALEDBAR=0
  CALL BOTCLEAR
  GOSUB PALED_BOT
  BOTPAL1=-1 : BOTPAL2=-1
  CALL BOTSELLIST
  CALL SETCHARALIST(FIRE)
  COPY ROM(1),32 TO $FF00 :'COLORIZE UI
  CALL SETPALETTE(PALE)
  GOSUB PALED_NUM
  GOTO PALED_CONTINUE

PALED_COLE:
'SWITCH TO A NEW COLOR
  CALL BOTFRAME(COLE+1,28+SHORT*2)
  CALL UPDCOLE(BT-1)
  CALL BOTFRAME(COLE+1,29+SHORT*2)
  GOSUB PALED_NUM
  GOTO PALED_CONTINUE

PALED_PAGE:
  CALL BOTPAGE
  ON EDIE GOTO CHARED,PALED,BACKED

PALED_NUM:
'UPDATE PALETTE AND COLOR NUMBER IN THE BOTTOM BAR
'UPDATE SPRITE POSITION IN THE COLORS RAINFALL
  C=COLOR(COLE+4,2)
  CW=INT(SHOWNW/32+0.25)
  BG 0
  PAL 1 : S$="@"+STR$(PALE)
  IF TALL THEN CALL BOTTXT(0,"PA",S$)
  IF SHORT THEN CALL BOTTXT(0,S$,"")
  PAL 3 : S$="@"+RIGHT$("0"+STR$(C),2)
  IF TALL THEN CALL BOTTXT(5,"COL",S$)
  IF SHORT THEN CALL BOTTXT(5,S$,"")
  'PLACE CURSOR
  SPRITE 159 PAL 1 SIZE 1
  X=0
  FOR I=(C MOD 4)-1 TO 0 STEP -1
    ADD X,PALEDCOL(I)
  NEXT I
  Y=(C\4)*PALED_RD+PALED_RD/2-3+PALED_RS+2
  SPRITE 159,X*8+4,Y,14
  X=0
  RETURN

PALED_FILE:
'ACCESS FILE LOAD/SAVE PAGE
  FINE=PALF
  GOSUB FILED
  IF SAVED THEN
    CALL SAVEPALETTE(FINE)
    MESSAGE "PALETTE SAVED"
  END IF
  IF LOADED THEN
    CALL LOADPALETTE(FINE)
    MESSAGE "PALETTE LOADED"
  END IF
  GOTO PALED

'=========================BACKED:
'A BACKGOUND CELLS EDITOR

'NEEDED TOOLS:
'(PENC, RECT, COPY, PAST), CHARALIST, PALETTE, FLIP, PRIO, UNDO
'PAINT PALETTE/FLIP/PRIO
'NEW/CLEAR, RESIZE, MOVE, FONT

'PEN, RECT, COPY, PAST, 20X40

'BACK, PEN, RECT, COPY, PAST, UNDO
'PAL, FLIP, PRIO, LAYER
'CHAR, PALE, FLIP, PRIO

'NOT IDEAL: CAN I STACK THE MODIFIER ON THE 1ST PAGE?

'I WANT A FAST WAY TO PAN/PEN/CHARALIST, RECT SEEMS OPTIONAL BUT BRUSH IS NOT. GOOD NEWS: I DON'T NEED TO SHOW THE CHARA LIST. I CAN USE THE MORE PAGE FOR THIS.
'WHAT ABOUT THE CHARA ON/OFF?

'MAIN:
'PAN,CHARALIST,UNDO
'PAL,FLIP,PRIO,LAYER
'PAGE,SOLO,MORE,FILE

'MORE:
'RECT,COPY,PASTE,INFO,UNDO
'CHAR,PAL,FLIP,PRIO
'LAYER,VIEW,MAIN,FILE

'FILE: FILE LIST
'BACK,LOAD,SAVE
'BG0,BG1,BG2,BG3
'NEW,SIZE,SLIDE,LAYER

'NEW: FILE LIST
'BACK,CLEAR
'FNT1,FNT2,FNT3,FNT4,FNT5

'LAYER:
'BACK,L#1,L#2,L#3,L#4
'BG#1,BG#2,BG#3,BG#4
'X,Y,W,H




SUB BACKED_V
  'SCROLL 1,BOTDRAG,-BOTSTART
  'SCROLL 0,BOTDRAG,-BOTSTART
  CALL RAIN_V
END SUB

SUB BACKED_R
  IF RASTER=0 THEN
    SYSTEM 2,0
    'COPY 64 USER'S CHARA
    POKEW $FFA0,$9000
    DMA COPY
    'COPY 32 USER'S PALETTE
    COPY $DFE0,32 TO $FF00
  ELSE IF RASTER=BOTSTART THEN
    SYSTEM 2,1
    'COPY 64 UI CHARA
    POKEW $FFA0,ROM(2)
    DMA COPY ROM
    'COPY UI PALETTE #1,#2,#3
    COPY ROM(1)+4,12 TO $FF04
    CALL SETPALETTE(PALE)
    'RE APPLY RAINBOW EFFECT ON CURSOR
    PALETTE 2,,,,RAINCOL
  END IF
  CALL BOTPAL_R
END SUB

BACKED:
'A TOOL THAT ALLOW USER TO EDIT 4 LAYERS OF BACKGROUND.
  'CLEAR FROM PREVIOUS PAGE
  ON RASTER OFF
  ON VBL OFF
  SPRITE OFF
  'RELOAD UI
  COPY ROM(2),$400 TO $8000
  FILL $FF00,32 :'BLACK SCREEN FOR TRANSITION
  CLS
  'USED TO DETECT HOW MANY COLS AND ROWS OF CELLS NEED TO BE REDRAWN
  ML=0 : MT=0 : MR=0 : MB=0
  'SETUP BOTTOM SIZE
  BOTHEIGHT=11+TALL*2
  CALL BOTCLEAR
  SCROLL 1,BOTDRAG,-BOTSTART
  SCROLL 0,BOTDRAG,-BOTSTART
  ON VBL CALL BACKED_V
  ON RASTER CALL BACKED_R


  'BG SOURCE ROM(3)
  'GOSUB BACKED_BOT

  'COPY THE USER'S CHARA FOR THE FIRST FRAME
  COPY $9000,$1000 TO $8000

  'PREPARE FOR DMA COPY DURING RASTER
  POKEW $FFA2,$400
  POKEW $FFA4,$8000

  'ON VBL CALL BACKED_V : CALL BACKED_V
  'ON RASTER CALL BACKED_R

  'IF BACKEDBAR=0 THEN
    GOSUB BACKED_BOT
    CALL SETCHARALIST(FIRE)
  'END IF

  COPY ROM(1),32 TO $FF00 :'COLORIZE UI
  CALL SETPALETTE(PALE)

  BT=-1 :'TAPPED BTN
  TC=0 :'TOUCH CONSUMED
  CC=0 :'CHARALIST HAS CHANGED

  'IF BACX=-9999 AND BACY=-9999 THEN
    CALL UPDBACX(0)
    CALL UPDBACY(0)
  'END IF

  'IF BACX=-9999 AND BACY=-9999 THEN
    CALL UPDBACX(24)
    CALL UPDBACY(24)
  'END IF

  'TEMP:
  LAYE=3

  GOSUB BACKED_SCROLL

BACKED_LOOP:
DO
  CALL GESTURE

IF BACKEDBAR=0 THEN
  'DETECT SELECTED CHARA CHANGE
  CALL BOTLIST(TC,CC)
  'DETECT BUTTON TAP AND BOTTOM BAR DRAG
  CALL BOTTAP(TC,BT,CC)
  IF CC THEN GOTO BACKED_SELCHAR
  IF BT>=0 THEN ON BT GOTO BACKED_SELPAN,BACKED_CONTINUE,BACKED_HFLIP,BACKED_VFLIP,BACKED_CONTINUE,BACKED_PALE,BACKED_PAGE,BACKED_CONTINUE,BACKED_MORE,BACKED_FILE,BACKED_CONTINUE
  'DETECT CANVAS ACTION
  GOSUB BACKED_TOOL

ELSE IF BACKEDBAR=1 THEN
  CALL BOTTAP(TC,BT,CC)
  IF BT>=0 THEN ON BT GOTO BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_MAIN,BACKED_CONTINUE
  'DETECT CANVAS ACTION
  GOSUB BACKED_TOOL

ELSE IF BACKEDBAR=2 THEN
  CALL BOTTAP(TC,BT,CC)
  IF BT=0 THEN GOTO BACKED_UNPALE
  IF BT>=1 AND BT<=8 THEN
    BG SOURCE ROM(3)
    CALL BOTFRAME(PALE+1,28)
    CALL UPDPALE(BT-1)
    CALL BOTFRAME(PALE+1,29)
    PAL 3 : CALL BOTTXT(9,"PA","@"+STR$(PALE))
    CALL SETPALETTE(PALE)
    TRACE BOTPAL1,BOTPAL2
    'BOTPAL1=BOTSTART+8
    'BOTPAL2=BOTPAL1+32
  END IF
  'DETECT CANVAS ACTION
  GOSUB BACKED_TOOL

END IF

BACKED_CONTINUE:
  WAIT VBL
  CALL CHECKRESIZE : IF RESIZED THEN GOTO BACKED
LOOP

BACKED_TOOLCHOOSE:
  CALL GESTURE
  'DETECT BUTTON TAP AND BOTTOM BAR DRAG
  CALL BOTTAP(TC,BT,CC)
  IF BT>=0 THEN ON BT GOTO BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE,BACKED_CONTINUE
  'DETECT CANVAS ACTION
  GOSUB BACKED_TOOL
  GOTO BACKED_CONTINUE

BACKED_BOT:
'REDRAW THE BOTTOM BAR

IF BACKEDBAR=0 THEN
  T=1 : IF BACKEDTOOL=0 THEN T=15
  CALL BOTADD(0,T)
  PAL 0 : INC BOTX : CALL BOTADDLIST
  CALL BOTADD(1,2)
  ADD BOTY,4+TALL : BOTX=0
  CALL BOTADD(5,7)
  CALL BOTADD(2,21+BACH*12)
  CALL BOTADD(3,22+BACV*12)
  CALL BOTADD(4,7)
  INC BOTX : CALL BOTADD(10,8)
  ADD BOTY,3+TALL : BOTX=0
  CALL BOTADD(6,7)
  INC BOTX : CALL BOTADD(7,7)
  INC BOTX : CALL BOTADD(8,7)
  CALL BOTADD(9,7)
  PAL 1
  CALL BOTTXT(0,"PAN","")
  CALL BOTTXT(1,"UN","DO")
  CALL BOTTXT(5,"PA@"+STR$(PALE),"")
  CALL BOTTXT(2,"H;","")
  CALL BOTTXT(3,"V<","")
  CALL BOTTXT(4,"PRIO","")
  CALL BOTTXT(10,"L@3","")
  CALL BOTTXT(6,"PAGE","")
  CALL BOTTXT(7,"SOLO","")
  CALL BOTTXT(8,"MORE","")
  CALL BOTTXT(9,"FILE","")

ELSE IF BACKEDBAR=1 THEN
  T=1 : IF BACKEDTOOL=0 THEN T=15
  CALL BOTADD(0,T)
  CALL BOTADD(1,2)
  INC BOTX : CALL BOTADD(2,2)
  CALL BOTADD(3,2)
  CALL BOTADD(8,32)
  INC BOTX : CALL BOTADD(9,2)
  ADD BOTY,4+TALL : BOTX=0
  CALL BOTADD(4,7+((BACM AND %1000)\8)*10)
  INC BOTX : CALL BOTADD(5,7+((BACM AND %100)\4)*10)
  CALL BOTADD(6,7+((BACM AND %10)\2)*10)
  INC BOTX : CALL BOTADD(7,7+(BACM AND %1)*10)
  ADD BOTY,3+TALL : BOTX=0
  CALL BOTADD(10,7)
  INC BOTX : CALL BOTADD(11,7)
  INC BOTX : CALL BOTADD(12,7)
  CALL BOTADD(13,7)
  PAL 1
  CALL BOTTXT(0,"PAN","")
  CALL BOTTXT(1,"RE","CT")
  CALL BOTTXT(2,"CO","PY")
  CALL BOTTXT(3,"PA","ST")
  CALL BOTTXT(9,"UN","DO")
  CALL BOTTXT(4,"CHAR","")
  CALL BOTTXT(5,"PALE","")
  CALL BOTTXT(6,"FLIP","")
  CALL BOTTXT(7,"PRIO","")
  CALL BOTTXT(10,"LAYE","")
  CALL BOTTXT(11,"VIEW","")
  CALL BOTTXT(12,"MAIN","")
  CALL BOTTXT(13,"FILE","")
  PAL 3 : BG 0
  X=BOTWIDGET(8,0)-1 : Y=BOTWIDGET(8,2)
  TEXT X+1,Y+1," 20" : TEXT X+1,Y+2,"X30"

ELSE IF BACKEDBAR=2 THEN
  CALL BOTADD(0,7)
  CALL BOTADD(9,8)
  ADD BOTX,8 : CALL BOTADD(13,8)
  ADD BOTY,3 : BOTX=0
  CALL BOTADD(5,23)
  CALL BOTADD(6,23)
  CALL BOTADD(7,23)
  CALL BOTADD(8,23)
  ADD BOTY,2 : BOTX=0
  CALL BOTADD(1,7)
  CALL BOTADD(2,7)
  CALL BOTADD(3,7)
  CALL BOTADD(4,7)
  ADD BOTY,4 : BOTX=0
  CALL BOTADD(10,7)
  CALL BOTADD(11,7)
  CALL BOTADD(14,7)
  ADD BOTX,0 : CALL BOTADD(12,7)
  PAL 1
  CALL BOTTXT(0,"BACK","")
  CALL BOTTXT(9,"FNT","")
  CALL BOTTXT(1,"BG@1","")
  CALL BOTTXT(2,"BG@2","")
  CALL BOTTXT(3,"BG@3","")
  CALL BOTTXT(4,"BG@4","")
  CALL BOTTXT(10,"SIZE","")
  CALL BOTTXT(11,"MOVE","")
  CALL BOTTXT(12,"FILE","")
  CALL BOTTXT(14,"TRIM","")
  CALL BOTTXT(13,"CLR","")
  PAL 3
  FOR B=5 TO 8
    CALL BOTTXT(B,RIGHT$("000"+HEX$(BGSIZE(B-5)),4),"")
  NEXT B

END IF
  RETURN

BACKED_MORE:
'SHOW A SECONDARY BOTTOM BAR
  BACKEDBAR=1
  SPRITE OFF
  CALL BOTCLEAR
  GOSUB BACKED_BOT
  GOTO BACKED_CONTINUE

BACKED_MAIN:
'SHOW THE PRIMARY BOTTOM BAR
  BACKEDBAR=0
  CALL BOTCLEAR
  GOSUB BACKED_BOT
  GOTO BACKED_CONTINUE

BACKED_PAGE:
  CALL BOTPAGE
  ON EDIE GOTO CHARED,PALED,BACKED

BACKED_FILE:
'SHOW A THIRD BOTTOM BAR
  BACKEDBAR=2
  'FORCE PAN TOOL
  CALL BOTDESELLIST
  BACKEDTOOL=0
  SPRITE OFF
  CALL BOTCLEAR
  GOSUB BACKED_BOT
  GOTO BACKED_CONTINUE

BACKED_REDRAW:
  'TRACE "DRAW",TIMER
  BGX=-BACX\8 : BGY=-BACY\8
  'TODO: SHOULD BE BETTER AND INCLUDES THE REMAINING PIXELS
  VIEWW=SHOWNW\8 : VIEWH=BOTSTART\8

  'TODO: USER SETTINGS FOR THIS
  OOBC=255 : OOBP=0
  L=3 : GOSUB BACKED_DRAWLAYER
  OOBC=0

'NOT READY YET
  'FOR L=2 TO 0 STEP -1 : GOSUB BACKED_DRAWLAYER : NEXT L

  RETURN

BACKED_DRAWLAYER:
'IMPLEMTATION FOR DRAWING ONE LAYER
'(IN) L THE LAYER INDEX 0..3
'(IN) BGX,BGY THE CURRENT PAN POSITION IN CELL COORDINATES, THERE IS ONLY ONE FOR EVERY LAYER, THEY ALL PAN TOGETHER. BGX,BGY ARE THE FIRST VISIBLE CELL IN THE TOP-LEFT CORNER, IT CAN BE NEGATIVE.
'(IN) VIEWW,VIEWH THE VISIBLE AREA IN CELLS COORDINATES.
'(IN) OOBC,OOBP THE CHARA NUM AND PALETTE FOR OUT-OF-BOUND CELLS.
  IF LAYERBG(L)>=0 THEN

    'TODO: THIS SHOULD WORK
    'BG SOURCE BGADDR(LAYERBG(L))+4,LAYERW(L),LAYERH(L)
    BG SOURCE BGADDR(LAYERBG(L))
    BG L


    CLS L


    'LAYER DIMENSION IN CELL COORDINATES
    MAPW=LAYERW(L) : MAPH=LAYERH(L)
    'COMPUTE HOW MANY CELLS ARE NOT VISIBLE FROM THE LAYER IN EACH DIRECTION.
    OOLEFT=MAX(0,-BGX)
    OOTOP=MAX(0,-BGY)
    OORIGHT=MAX(0,-MAPW+BGX+VIEWW)
    OOBOTTOM=MAX(0,-MAPH+BGY+VIEWH)
    'COMPUTE HOW MANY CELLS MUST BE DRAWN FOR THIS LAYER
    CPX=BGX+OOLEFT
    CPY=BGY+OOTOP
    CPW=VIEWW-OOLEFT-OORIGHT+2
    CPH=VIEWH-OOTOP-OOBOTTOM+1

'NOT READY YET
GOTO SKIP12

    'DRAW THE CELLS FOR THE LAYER
    IF MR>0 THEN
      TRACE MR
      MW=CEIL(MR/8)
      C=CPX+CPW-MW
      IF C<=MAPW THEN BG COPY C,CPY,MW,CPH TO C,CPY
      ADD MR,-MW*8
    ELSE IF ML>0 THEN
      TRACE ML
      MW=CEIL(ML/8)
      C=CPX-MW
      IF C>=0 THEN BG COPY C,CPY,MW,CPH TO C,CPY
      ADD ML,-MW*8
    ELSE
    'COPY THE WHOLE BG
    IF CPW>0 AND CPH>1 THEN BG COPY CPX,CPY,CPW,CPH TO CPX,CPY
    'TRACE "COPY",CPW,CPH
    END IF
SKIP12:
    BG COPY CPX,CPY,CPW,CPH TO CPX,CPY

    'FOR THE LAYER IN BACK OF ALL OTHER, USE THE MAX DIMENSION OF ALL LAYER
    IF L=3 THEN
      MAPW=LAYERMW : MAPH=LAYERMH
    END IF
    'DRAW OUT-OF-BOUND CELLS
    PAL OOBP : FLIP 0,0 : PRIO 0
    IF BGX<1 THEN BG FILL -3,0 TO -1,63 CHAR OOBC
    IF BGY<1 THEN BG FILL 0,-3 TO 63,-1 CHAR OOBC
    IF BGX>=MAPW-VIEWW THEN BG FILL MAPW AND $3F,0 TO 63,63 CHAR OOBC
    IF BGY>=MAPH-VIEWH THEN BG FILL 0,MAPH AND $3F TO 63,63 CHAR OOBC
  END IF
  RETURN

BACKED_TOOL:
  IF TC<>0 AND TC<>161 THEN RETURN
  IF TC=161 AND NOT TOUCH THEN TC=0
  IF NOT TOUCH THEN RETURN
  IF TAP AND PRESSEDY<BOTSTART THEN
    TC=161
    'ORIGINAL POSITION BEFORE PAN
    OX=BACX : OY=BACY
    'PREVIOUS FRAME PANNED DISTANCE IN PIXEL
    PX=BACX : PY=BACY

    'MISSING PIXELS NOT DRAWN ON EACH SIDE
    ML=0 : MT=0 : MR=0 : MB=0

    'ONLY MANY CELLS COLUMNS OR ROWS TO REDRAW WHEN PANNING FROM LEFT,TOP,RIGHT,BOTTOM DIRECTION
    'OL=-1 : OT=-1 : OB=-1 : OD=-1

  END IF
  IF TC<>161 THEN RETURN

IF BACKEDTOOL=0 THEN
'TRACE "PAN"
  'HANDLE PAN OF THE WHOLE CANVAS
  'COMPUTE NEW BACKGROUND POSITION
  DX=INT(TOUCH.X-PRESSEDX) : DY=INT(TOUCH.Y-PRESSEDY)
  NX=OX+DX : NY=OY+DY
  'CLAMP THE POSITION
  VIEWW=SHOWNW\8 : VIEWH=BOTSTART\8
  IF LAYERMW>VIEWW-6 THEN
    NX=CLAMP(NX,-(LAYERMW*8-SHOWNW+24),24)
  ELSE
    NX=CLAMP(NX,24,SHOWNW-LAYERMW*8-24)
  END IF
  IF LAYERMH>VIEWH-6 THEN
    NY=CLAMP(NY,-(LAYERMH*8-BOTSTART+24),24)
  ELSE
    NY=CLAMP(NY,24,BOTSTART-LAYERMH*8-24)
  END IF

  'TRACE "===",NX-PX

  'HOW MANY PIXELS AS BEEN PANNED THIS FRAME
  X=NX-PX : Y=NY-PY
  IF X<0 THEN
    ADD MR,-X
    ML=0
  ELSE IF X>0 THEN
    ADD ML,X
    MR=0
  END IF
  'TRACE ((PX-DX)/8),((PY-DY)/8)
  PX=NX : PY=NY
  'TRACE "MRL",MR,ML


  'REMEMBER POSITION
  CALL UPDBACX(NX)
  CALL UPDBACY(NY)
  GOTO BACKED_SCROLL

ELSE IF BACKEDTOOL=1 THEN
  'DRAW CHARACTER ON THE LAYER
  'CONPUTE TOUCHED CELL ON USER'S BG
  EX=INT((TOUCH.X-BACX)/8)
  EY=INT((TOUCH.Y-BACY)/8)

  L=3
  'BG SOURCE BGADDR(LAYERBG(L))+4,LAYERW(L),LAYERH(L)
  BG SOURCE BGADDR(LAYERBG(L))
  BG L
  TRACE EX,EY,CARE
  PAL PALE

  C=MCELL.C(EX,EY) : A=MCELL.A(EX,EY)
  'TODO MASK
  'TODO AND

  CELL EX,EY,CARE
  MCELL EX,EY,CARE

ELSE

  RETURN
END IF
  RETURN

BACKED_SCROLL:
  SCROLL 3,-BACX,-BACY
  SCROLL 2,-BACX,-BACY
  GOSUB BACKED_REDRAW
  RETURN

BACKED_SELPAN:
  CALL BOTDESELLIST
  BACKEDTOOL=0
  X=BOTWIDGET(0,0) : Y=BOTWIDGET(0,2) : H=0
  BG SOURCE ROM(3) : CALL BOTASSET(X,Y,15,H)
  GOTO BACKED_CONTINUE

BACKED_SELCHAR:
  TRACE "SELCHAR"
  CALL BOTSELLIST
  BACKEDTOOL=1
  X=BOTWIDGET(0,0) : Y=BOTWIDGET(0,2) : H=0
  BG SOURCE ROM(3) : CALL BOTASSET(X,Y,1,H)
  GOTO BACKED_CONTINUE

BACKED_PALE:
  BACKEDBAR=2
  TRACE "BOTSTART",BOTSTART
  CALL BOTPAL
  TRACE "BOTPAL12",BOTPAL1,BOTPAL2
  CALL BOTFRAME(PALE+1,29)
  GOTO BACKED_CONTINUE

BACKED_UNPALE:
  BACKEDBAR=0
  CALL BOTCLEAR
  GOSUB BACKED_BOT
  BOTPAL1=-1 : BOTPAL2=-1
  TRACE "UNPALE"
  CALL BOTSELLIST
  CALL SETCHARALIST(FIRE)
  COPY ROM(1),32 TO $FF00 :'COLORIZE UI
  CALL SETPALETTE(PALE)
  CALL UPDBACA((BACA AND %111000) OR PALE)
  TRACE "PALE",PALE
  'GOSUB PALED_NUM
  GOTO BACKED_CONTINUE

BACKED_MASK:

  GOTO BACKED_CONTINUE

BACKED_HFLIP:
  CALL UPDBACH((BACH+1)MOD 2)
  X=BOTWIDGET(2,0) : Y=BOTWIDGET(2,2) : H=0
  BG SOURCE ROM(3) : CALL BOTASSET(X,Y,21+BACH*12,H)
  GOTO BACKED_MASK

BACKED_VFLIP:
  CALL UPDBACV((BACV+1)MOD 2)
  X=BOTWIDGET(3,0) : Y=BOTWIDGET(3,2) : H=0
  BG SOURCE ROM(3) : CALL BOTASSET(X,Y,22+BACV*12,H)
  GOTO BACKED_MASK

'==========================FILED:
'A FILE SELECTOR FOR SAVE/LOAD OPERATION

'PAL#1 UI
'PAL#2 UI

'BG#3 FILE LIST
'BG#1 BOTTOM BAR UI FRAME
'BG#0 BOTTOM BAR UI TEXT

'CHR#0..63 UI

SUB FILED_V
  SCROLL 1,BOTDRAG,-BOTSTART
  SCROLL 0,BOTDRAG,-BOTSTART
  CALL RAIN_V
END SUB

SUB FILED_R
  IF RASTER=0 AND (FILEON_R<0 AND FILEOFF_R>0) THEN
    PALETTE 0,48,,,
  ELSE IF RASTER=FILEON_R THEN
    PALETTE 0,48,,,
  ELSE IF RASTER=0 OR RASTER=FILEOFF_R THEN
    PALETTE 0,5,,,
  ELSE IF RASTER=BOTSTART THEN
  END IF
END SUB

FILED:
'A TOOL TO ALLOW USER TO SELECT A FILE FOR SAVE OR LOAD FROM IT.

'PAL#0 UI AND COLORS RAINFALL
'PAL#1 UI

'BG#3 FILES LIST

  ON RASTER OFF
  ON VBL OFF
  SPRITE OFF
  SYSTEM 2,0
  'LOAD UI AND FULL FONT CHARACTERS
  COPY ROM(2),$800 TO $8000
  BG SOURCE ROM(3)
  CLS
  FILEON_R=999
  GOSUB FILED_BOT
  CALL FILED_V
  ON VBL CALL FILED_V
  ON RASTER CALL FILED_R
  GOSUB FILED_LIST
  FILEDDRAG=-SAFE.T
  SCROLL 3,0,FILEDDRAG
  GOSUB FILED_UPDR

  BT=-1 :'TAPPED BUTTON
  TC=0 :'TOUCH CONSUMED
  CC=0 :'CHARALIST HAS CHANGED
  LOADED=0
  SAVED=0

FILED_LOOP:
DO
  CALL GESTURE
  'DETECT BUTTON TAP AND BOTTOM BAR DRAG
  CALL BOTTAP(TC,BT,CC)
  IF BT>=0 THEN ON BT GOTO FILED_BACK,FILED_LOAD,FILED_SAVE

  GOSUB FILED_TAP

FILED_CONTINUE:
  WAIT VBL
  CALL CHECKRESIZE : IF RESIZED THEN GOTO FILED
LOOP

FILED_BOT:
'REDRAW THE BOTTOM BAR

  BG 1 : CLS 1 : PAL 1 : FONT 0
  'FIRST ROW
  CALL BOTCLEAR
  CALL BOTADD(0,7)
  INC BOTX
  CALL BOTADD(1,7)
  CALL BOTADD(2,7)

  BG 0 : CLS 0 : PAL 1
  CALL BOTTXT(0,"BACK","")
  CALL BOTTXT(1,"LOAD","")
  CALL BOTTXT(2,"SAVE","")

  'COMPUTE BOTTOM BAR POSITION
  BOTSTART=SHOWNH-BOTHEIGHT*8
  BOTEND=BOTSTART+BOTHEIGHT*8
  BOTDRAG=CLAMP(BOTDRAG,0,MAX(0,BOTMAX*8+8-SHOWNW))
  RETURN

FILED_LIST:
'DRAW FILE SELECTION

  PAL 1 : FONT 64
  BG 3 : CLS 3
  X=1+SAFE.L\8
  Y=1 :'SAFE.T\8
  FOR I=0 TO 15
    YY=Y+I*3
    TEXT X,YY,RIGHT$(" "+STR$(I),2)
    IF FILE$(I)<>"" AND FSIZE(I)>0 THEN
      TEXT X+3,YY,FILE$(I)
      TEXT X+8,YY+1,STR$(FSIZE(I))+" BYTES"
      LOAD I,$DFDE,2
      IF FSIZE(I)=32 THEN
        TEXT X+3,YY+1,"PAL?"
      ELSE IF FSIZE(I)=$1000 THEN
        TEXT X+3,YY+1,"CHR?"
      ELSE IF PEEKW($DFDE)=0 THEN
        TEXT X+3,YY+1,"BG ?"
      END IF
    END IF
  NEXT I
  RETURN

FILED_TAP:
  IF NOT TAP THEN RETURN
  IF TOUCH.Y>=BOTSTART THEN RETURN
  'DETECT BOTTOM UI PAN OR TAP
  TIME=0 : PX=TOUCH.X : PY=TOUCH.Y
  WAIT VBL
  DO
    INC TIME
    D=LEN(TOUCH.X-PX,TOUCH.Y-PY)
    IF NOT TOUCH AND TIME<20 AND D<10 THEN
      CY=(TOUCH.Y+FILEDDRAG)\8
      IF CY MOD 3>0 AND CY>=0 AND CY<48 THEN
        FINE=CY\3
        GOSUB FILED_UPDR
      END IF
      B=-1
      RETURN
    ELSE IF D>=10 OR TIME>=20 THEN
      GOTO FILED_DRAG
    END IF
  WAIT VBL
  LOOP

FILED_DRAG:
  'WILL DRAG/PAN THE FILES LIST
  OY=FILEDDRAG
  WHILE TOUCH
    FILEDDRAG=OY-TOUCH.Y+PY
    'CLAMP THE DRAG
    M=3*16*8-BOTSTART+8
    IF FILEDDRAG<-SAFE.T OR FILEDDRAG>M THEN
      FILEDDRAG=CLAMP(FILEDDRAG,-SAFE.T,MAX(0,M))
      PY=TOUCH.Y
      OY=FILEDDRAG
    END IF
    SCROLL 3,0,FILEDDRAG
    GOSUB FILED_UPDR
    WAIT VBL
  WEND
  RETURN

FILED_UPDR:
'REFRESH
  FILEON_R=(FINE*3+1)*8-2-(FILEDDRAG\1)
  FILEOFF_R=FILEON_R+20
  RETURN

FILED_BACK:
'BACK TO THE PREVIOUS PAGE WITHOUT ACTION
TRACE "BACK"
  WAIT VBL
  RETURN

FILED_LOAD:
'BACK TO THE PREVIOUS PAGE WITH LOADING
TRACE "LOAD"
  WAIT VBL
  LOADED=-1
  RETURN

FILED_SAVE:
'BACK TO THE PREVIOUS PAGE WITH SAVING
TRACE "SAVE"
  WAIT VBL
  SAVED=-1
  RETURN







#1:MAIN PALETTES
00000000090305000903303209050200
09033C0009031C000903270009031200

#2:MAIN CHARACTERS
00000000000000000000000000000000
FFFFFFFFFFFFFFFF0000000000000000
0000000000000000FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFF8E0E0C0C0C00000071F1F3F3F3F
FFFF0000000000000000FFFFFFFFFFFF
C0C0C0C0C0C0C0C03F3F3F3F3F3F3F3F
FFFFFFFCF0F0E0E0000F3F3F7F7F7F7F
FFFFFF000000000000FFFFFFFFFFFFFF
E0E0E0E0E0E0E0E07F7F7F7F7F7F7F7F
C0C0C0C0C0C0C0C0BFBFBFBFBFBFBFBF
FFFF000000000000FF00FFFFFFFFFFFF
C0C0000000000000BF3FFFFFFFFFFFFF
FF80BFA0A0A0A0A0FFFFFFE0E0E0E0E0
07080F0F090FEFDB070F08080E08E8BC
008080808080F8FC008080808080F8AC
003C666E76663C000000000000000000
0018381818187E000000000000000000
003C66063C607E000000000000000000
003C660C06663C000000000000000000
00206060647E04000000000000000000
007E607C06663C000000000000000000
003C607C66663C000000000000000000
007E060C181818000000000000000000
003C663C66663C000000000000000000
003C663E06663C000000000000000000
00187E781E7E18000000000000000000
002466E7E76624000000000000000000
183C7E00007E3C180000000000000000
00000000000000000000000000000000
EFAF775F2F170C0398D8486030180F03
FE567EFAFCF408F0AAAA8206040CF8F0
00247E24247E24000000000000000000
003C66667E6666000000000000000000
007C667C66667C000000000000000000
003C666060663C000000000000000000
007C666666667C000000000000000000
007E607860607E000000000000000000
007E6078606060000000000000000000
003C66606E663E000000000000000000
0066667E666666000000000000000000
003C181818183C000000000000000000
001E0C0C0C6C38000000000000000000
00666C786C6666000000000000000000
0060606060607E000000000000000000
0042667E7E6666000000000000000000
0066767E6E6666000000000000000000
003C666666663C000000000000000000
007C66667C6060000000000000000000
003C66666A6C3E000000000000000000
007C66667C6666000000000000000000
003E603C06067C000000000000000000
007E1818181818000000000000000000
0066666666663C000000000000000000
00666666663C18000000000000000000
0066667E7E6642000000000000000000
0066663C3C6666000000000000000000
0066663C181818000000000000000000
007E0E1C38707E000000000000000000
FFFFFFFCF0F0E0E0000F3F3C70706060
FFFFFF000000000000FFFF0000000000
E0E0E0E0E0E0E0E06060606060606060
00000000000000000E0E0E0E0E0E0E0E
00000000000000000000000000000000
00000000000000000000000000000000
00181818180018000000000000000000
006C6C24000000000000000000000000
00247E24247E24000000000000000000
00083E380E3E08000000000000000000
00626408102646000000000000000000
001C34386E643A000000000000000000
00181830000000000000000000000000
000C183030180C000000000000000000
0030180C0C1830000000000000000000
000024187E1824000000000000000000
000018187E1818000000000000000000
00000000181830000000000000000000
000000007E0000000000000000000000
00000000001818000000000000000000
00060C18306040000000000000000000
003C666E76663C000000000000000000
0018381818187E000000000000000000
003C66063C607E000000000000000000
003C660C06663C000000000000000000
00206060647E04000000000000000000
007E607C06663C000000000000000000
003C607C66663C000000000000000000
007E060C181818000000000000000000
003C663C66663C000000000000000000
003C663E06663C000000000000000000
00000018001800000000000000000000
00000018001830000000000000000000
00000C1830180C000000000000000000
0000007E007E00000000000000000000
000030180C1830000000000000000000
003C660C180018000000000000000000
003C666E6E603C000000000000000000
003C66667E6666000000000000000000
007C667C66667C000000000000000000
003C666060663C000000000000000000
007C666666667C000000000000000000
007E607860607E000000000000000000
007E6078606060000000000000000000
003C66606E663E000000000000000000
0066667E666666000000000000000000
003C181818183C000000000000000000
001E0C0C0C6C38000000000000000000
00666C786C6666000000000000000000
0060606060607E000000000000000000
0042667E7E6666000000000000000000
0066767E6E6666000000000000000000
003C666666663C000000000000000000
007C66667C6060000000000000000000
003C66666A6C3E000000000000000000
007C66667C6666000000000000000000
003E603C06067C000000000000000000
007E1818181818000000000000000000
0066666666663C000000000000000000
00666666663C18000000000000000000
0066667E7E6642000000000000000000
0066663C3C6666000000000000000000
0066663C181818000000000000000000
007E0E1C38707E000000000000000000
003C303030303C000000000000000000
006030180C0602000000000000000000
003C0C0C0C0C3C000000000000000000
00183C66000000000000000000000000
0000000000007E000000000000000000

#3:MAIN BG
00002013040105010501050105010409
04010501050105010409040105010501
04093B013C013C013B093B023C023C02
3B0A0000000000000000000000000000
00000000060102010201020102010609
06010201020102010609060102010201
06093D01000100013D093D0200020002
3D0A0000000000000000000000000000
00000000060102010201020102010609
06010201020102010609060102010201
06093D01000100013D093D0200020002
3D0A0000000000000000000000000000
00000000041105110511051105110419
04110511051105110419041105110511
04193B113C113C113B193B123C123C12
3B1A0000000000000000000000000000
00000000040105010501050105010409
04010501050105010409040105010501
04093B013C013C013B093B023C023C02
3B0A0000000000000000000000000000
00000000060102010201020102010609
06010201020102010609060102010201
06093D01000100013D093D0200020002
3D0A0000000000000000000000000000
00000000041105110511051105110419
04110511051105110419041105110511
04193B113C113C113B193B123C123C12
3B1A0000000000000000000000000000
0000000004020502050205020502040A
0402050205020502040A040205020502
040A0004010402040304000501050205
03050006010602060306000701070207
0307000006020202020202020202060A
0602020202020202060A060202020202
060A0004010402040304000501050205
03050006010602060306000701070207
0307000006020202020202020202060A
0602020202020202060A060202020202
060A0004010402040304000501050205
03050006010602060306000701070207
0307000004120512051205120512041A
0412051205120512041A041205120512
041A0004010402040304000501050205
03050006010602060306000701070207
0307000004020502050205020502040A
0402050205020502040A040205020502
040A0000000000000000000000000000
00000000000000000000000000000000
0000000006020202020202020202060A
0602020202020202060A060202020202
060A0000000000000000000000000000
00000000000000000000000000000000
0000000004120512051205120512041A
0412051205120512041A041205120512
041A0000000000000000000000000000
00000000000000000000000000000000
00000000010101010101010101010101
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010101010101010101010101
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010101010101010101010101
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010101010101010101010101
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000

#13: DEFAULT PALETTE
0903020800131512003F3E3D002E2D2C
0022201F00363534001E190200060504

