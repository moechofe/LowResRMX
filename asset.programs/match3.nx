'MATCH3 BY MARTIN "MOECHOFE" MAUCHAUFFEE 2023
'VERSION: 21



'TODO:
'(X) BETTER MATCH COMPUTATION
'(X) COMPUTES FOR EACH SLOT NUMBER OF CONSECUTIVE IDENTICAL THING TYPE IN HORIZONAL AND VERTICAL
'(X) MARK SLOT THAT NEED TO BE RECOMPUTE
'(X) KEEP TRACK OF THE THINGS WITH THE MOST HORIZONTAL PLUS VERTICAL SCORE.
'(X) THIS SHOULD BE THE CENTER OF THE THING TO REMOVE
'( ) ANIMATE THINGS REMOVAL
'( ) mark a thing to be evaluated as possible matches instead of selecting



'IDEA:
'AFTER A CERTAIN TIME, THING CAN CHANGE TYPES: APPLE CAN BE EATEN BY A WORM, BREAD CAN BE COVERED IN MOLD, AND COIN CAN GET DIRTY.



'USED TO CENTER THE SCREEN
GLOBAL TOP,LEF
TOP=(384-SHOWN.H)\2
LEF=(216-SHOWN.W)\2



'reserve a bunch of sprites for the particles

GLOBAL SPRT

'SPRITES ARE USED TO REPLACE STATIC BG CELL BY SPRITE WHEN THEY ARE MOVING. 1 SPRITE ARE NEEDED PER THINGS, 7*8 SLOTS, 56 SPRITES ARE NEEDED.
SPRT=0

'RESERVE THE MAXIMUM SPRITES FOR PARTICLES
PARTICLE SPRT+56,150-56 AT $9000
EMITTER 1 AT $9000+(150-56)*6

'temp
FOR S=SPRT+56 TO 149 : SPRITE S PAL 5 : NEXT S



'=========================== THINGS:
'the things are the visual element that can be swaped.
'they are shown using bg cells when they are static and using sprite when they are moving.

'THINGS TYPE INSIDE SLOT
'-1 EMPTY SLOT
'0 BREAD
'1 APPLE
'2 COINS

'THINGS TYPES FROM BOARD COORDS
'(C,) COLUMN INDEX
'(,R) ROW INDEX
'(,)= THING TYPE
DIM GLOBAL THINGS(6,7)

THING2PAL:
'GIVE PALETTE FROM THING TYPE
DATA 0,1,3 :'BREAD,APPLE,COINS

SUB USESPRITE(C,R,Y,A)
'REPLACE A THING DRAWN USING CELLS BY A THING DRAWN USING SPRITES
'IN C COLUMN INDEX
'IN R ROW INDEX
'IN Y OFFSET
'IN A USE ALTERNATIVE APPEARENCE (A CHARA OFFSET)
T=THINGS(C,R)
'HIDE CELLS
BG 1
CC=C*3+3
CR=R*3+14
BG FILL CC,CR TO CC+2,CR+2 CHAR 0
'SHOW MAIN SPRITE
S=SPRT+C+R*7
SPRITE S,C*24+24-LEF,R*24+112+Y-TOP,T*3+4+A
RESTORE THING2PAL
SKIP T : READ P
SPRITE S PAL P SIZE 2
END SUB

SUB USECELL(C,R)
'REPLACE A THING DRAWN USING SPRITES BY A THING DRAWN USING CELLS
'IN C COLUMN INDEX
'IN R ROW INDEX
T=THINGS(C,R)
'HIDE SPRITES
S=SPRT+C+R*7
SPRITE OFF S
'SHOW CELLS
BG 1
BG COPY T*3,0,3,3 TO C*3+3,R*3+14
ANIMATIONS(C,R,0)=0
END SUB

SUB FLASHCELL(C,R)
'MAKE A THING FLASHING WHITE
'IN C COLUMN INDEX
'IN R ROW INDEX
X=C*3+3
Y=R*3+14
BG 1 : PAL 4
FOR I=X TO X+2
FOR J=Y TO Y+2
CELL I,J,
NEXT J
NEXT I
END SUB

SUB HIDECELL(C,R)
'HIDE THE CELLS OF A THING
'IN C COLUMN INDEX
'IN R ROW INDEX
X=C*3+3
Y=R*3+14
BG 1
BG FILL X,Y TO X+2,Y+2 CHAR 0
END SUB

SUB THINGDROPING(C,R,P,T)
'ANIMATE A THING DROPING
'IN C COLUMN INDEX
'IN R ROW INDEX
'IN P ANIM PARAMETER
'IN T TIME PROGRESS 0..1
S=SPRT+C+R*7
FT=EASE(9,1,T)*EASE(3,0,T)
SPRITE S,,R*24+112+P-FT*P-TOP,
END SUB

SUB DSTHORIZ(C,R,X,T)
'ANIMATE A THING GOING LEFT OR RIGHT
'IN C COLUMN index
'in r row index
'in x the direction
'in t time progress 0..1
S=SPRT+C+R*7
FT=EASE(2,0,T)
SPRITE S,C*24+24+X*FT-LEF,,
END SUB

' SUB SWAPTHING(SC,SR,DC,DR)
' 'TODO: not used
' 'SWAP TWO THINGS
' 'SC,SR SRC COLUMN AND ROW
' 'DC,DR DST COLUMN AND ROW
' T=THINGS(DC,DR)
' THINGS(DC,DR)=THINGS(SC,SR)
' THINGS(SC,SR)=T
' END SUB



'============================= SAME:
'when matching things, browse the board and count how many other things share the same thing index with it. Do that in each direction: up,down,left and right.

'COUNTER OF CONSECUTIVE THINGS THAT SHARE THE SAME TYPE AS THE ONE AT BOARD COORDS
'(C,,) COLUMN INDEX
'(,R,) ROW INDEX
'(,,0) AT LEFT
'(,,1) AT RIGHT
'(,,2) AT UP
'(,,3) AT DOWN
DIM GLOBAL SAMETHINGS(6,7,3)

SUB SCANLEFT(C,R,M)
'COUNT CONSECUTIVE MATCHES at the left of the thing in c,r
'IN C COLUMN INDEX
'IN R ROW INDEX
'OUT M MATCHED NUMBER OF THINGS IN THAT DIRECTION
'OUT T TOTAL MATCHED NUMBER OF THE SAME THINGS
T=THINGS(C,R)
FOR CC=C-1 TO 0 STEP -1
IF THINGS(CC,R)<>T THEN EXIT SUB
INC M
NEXT CC
END SUB
SUB SCANRIGHT(C,R,M)
T=THINGS(C,R)
FOR CC=C+1 TO 6
IF THINGS(CC,R)<>T THEN EXIT SUB
INC M
NEXT CC
END SUB
SUB SCANUP(C,R,M)
T=THINGS(C,R)
FOR RR=R-1 TO 0 STEP -1
IF THINGS(C,RR)<>T THEN EXIT SUB
INC M
NEXT RR
END SUB
SUB SCANDOWN(C,R,M)
T=THINGS(C,R)
FOR RR=R+1 TO 7
IF THINGS(C,RR)<>T THEN EXIT SUB
INC M
NEXT RR
END SUB

SUB SCANSAME(C,R)
'COUNT CONSECUTIVE MATCHES in each direction for the thing in c,r
'IN C COLUMN INDEX
'IN R ROW INDEX
CALL SCANLEFT(C,R,SAMETHINGS(C,R,0))
CALL SCANRIGHT(C,R,SAMETHINGS(C,R,1))
CALL SCANUP(C,R,SAMETHINGS(C,R,2))
CALL SCANDOWN(C,R,SAMETHINGS(C,R,3))
END SUB

SUB SCANBOARD
'SCAN THE BOARD FOR 3 MATCHES
'C COLUMN INDEX
'R ROW INDEX
FOR C=0 TO 6
FOR R=0 TO 7
CALL SCANSAME(C,R)
NEXT R
NEXT C
END SUB



'============================ MATCH:
'used to show which things matches and can be removed from the board.

'STORE THE COLUMN AND ROW OF THE THING THAT SHARE THE MOST CONSECUTIVE SAME THINGS TYPE IN EACH DIRECTION
GLOBAL MATCHC,MATCHR

SUB SEARCHMATCH
'LOOK FOR THE BIGEST MATCHes
HORI=0 :'count CONSECUTIVE LEFT+RIGHT matches
VERT=0 :'count CONSECUTIVE UP+DOWN matches
MATCHC=-1
MATCHR=-1
MATCHT=0 :'MATCHED TOTAL
FOR C=0 TO 6
FOR R=7 TO 0 STEP -1
HORI=SAMETHINGS(C,R,0)+SAMETHINGS(C,R,1)
VERT=SAMETHINGS(C,R,2)+SAMETHINGS(C,R,3)
IF (HORI>1 OR VERT>1) AND HORI+VERT>MATCHT THEN
MATCHC=C : MATCHR=R : MATCHT=HORI+VERT
'TODO: deleteme
MATCHDIR=0 : MATCHDIST=0
END IF
NEXT R
NEXT C
TRACE "TOTAL",MATCHT,MATCHC,MATCHR
END SUB

SUB MARKMATCH(C,R)
'SHOW A MARK BELOW THE THINGS TO TELL THE PLAYER WHICH THINGS WILL BE REMOVED
BG 3
PAL 7
'CROSS
BG COPY 0,3,3,3 TO C*3+3,R*3+14
'LEFT
FOR CC=C-1 TO C-SAMETHINGS(C,R,0) STEP -1
'HORIZONTAL
BG COPY 3,3,3,3 TO CC*3+3,R*3+14
CALL DELTHING(CC,R)
NEXT CC
'RIGHT
FOR CC=C+1 TO C+SAMETHINGS(C,R,1)
'HORIZONTAL
BG COPY 3,3,3,3 TO CC*3+3,R*3+14
CALL DELTHING(CC,R)
NEXT CC
CC=C
'UP
FOR RR=R-1 TO R-SAMETHINGS(C,R,2) STEP -1
'VERTICAL
BG COPY 6,3,3,3 TO C*3+3,RR*3+14
CALL DELTHING(C,RR)
NEXT RR
'DOWN
FOR RR=R+1 TO R+SAMETHINGS(C,R,3)
'VERTICAL
BG COPY 6,3,3,3 TO C*3+3,RR*3+14
CALL DELTHING(C,RR)
NEXT RR
END SUB


'ANIMATION TYPES
'0 STATIC THING
'1 DROPPING THING
'2 SWAPPING THING TO THE LEFT OR RIGHT
'3 SWAPPING THING TO THE UP OR DOWN
'4 SWAPPING THING FROM CURRENT POS TO LEFT OR RIGHT
'5 SWAPPING THING FROM CURRENT POS TO UP OR DOWN
'6 MAKE A THING DISSAPEAR AFTER MATCH


'A LIST OF ORDERED THINGS TO DELETE
'(I,) SLOT INDEX
'(,0) COLUMN INDEX
'(,1) ROW INDEX
DIM GLOBAL DELTHINGS(42,1)
'INDEX OF THE NEXT FREE SLOT & NUMBER OF FREE SLOT IN THE LIST & THE LAST SLOT INDEX DELETED
GLOBAL DELNEXT,DELFREE,DELLAST
DELNEXT=0
DELFREE=43
DELLAST=42

'ANIMATION DATA FOR THINGS
'(C,,) COLUMN INDEX
'(,R,) ROW INDEX
'(,,0) ANIMATION TYPE
'(,,1) DELAY BEFORE ANIM
'(,,2) PARAMETER
'(,,3) TIME PROGRESS 0..1
'(,,4) TIME PROGRESS SPEED
DIM GLOBAL ANIMATIONS(6,7,4)


'XXX: NOT USED

'THINGS MARKED AS MATCHED
'(I,) AN INDEX
'(,0) COLUMN INDEX
'(,1) ROW INDEX
DIM GLOBAL MARKED(12,1)
'COUNT OF MARKED THINGS
GLOBAL MARKEDCNT
MARKEDCNT=0


'XXX: NOT USED

SUB MARK(C,R)
MARKED(MARKEDCNT,0)=C
MARKED(MARKEDCNT,1)=R
INC MARKEDCNT

'TEMP:
BG 3
SCROLL 3,LEF,TOP
CC=C*3+3
RR=R*3+14
PAL 7
BG FILL CC,RR TO CC+2,RR+2 CHAR 1
END SUB



'REGISTER THINGS TO BE DELETED
SUB DELTHING(C,R)
IF DELFREE=0 THEN MESSAGE "BUG"
DELTHINGS(DELNEXT,0)=C
SELTHINGS(DELNEXT,1)=R
DELNEXT=(DELNEXT+1) MOD 43
DEC DELFREE
END SUB


SUB UPDDELETE



END SUB

'WHEN MAKE MATCHED THINGS DISSAPEAR, WE NEED TO WAIT FOR THE POTENTIAL PREVIOUS DROP ANIMATION, THIS STORE THE CURRENT DIRECTION AND THE DISTANCE FROM MATCHC,MATCHR
GLOBAL MATCHDIR,MATCHDIST

SUB UPDMATCH
'WILL FRAME BY FRAME ANIMATES THE DISSAPEARING OF MATCHED THINGS
'TRACE "MATCHDIST",MATCHDIST

  IF MATCHDIST=0 THEN GOTO UM_MIDDLE
  IF MATCHDIST>0 THEN ON MATCHDIR GOTO UM_LEFT, UM_RIGHT, UM_UP, UM_DOWN

  EXIT SUB

UM_MIDDLE:
  IF ANIMATIONS(MATCHC,MATCHR,0)<>0 THEN EXIT SUB
  MATCHDIST=1
  CALL ADDANIM(MATCHC,MATCHR,6,0,1/5,0)
  CALL DELTHING(MATCHC,MATCHR)
  EXIT SUB

UM_LEFT:
  C=MATCHC-MATCHDIST
  IF ANIMATIONS(C,MATCHR,0)<>0 THEN EXIT SUB
  MATCHDIR=1
  CALL ADDANIM(MATCHC,MATCHR,6,0,1/5,0)
  CALL DELTHING(MATCHC,MATCHR)
  EXIT SUB

UM_UP:
  EXIT SUB

END SUB








'ORIGINAL TOUCH COORDS WHEN BEGIN A THING SWAP
GLOBAL PULLX,PULLY

'RE-POSITION THE SRC THING USING TOUCH BUT MAKE IT ATTACH TO IT'S COLUMN AND ROW.
SUB PULLTHING(C,R)
OX=TOUCH.X-PULLX
OY=TOUCH.Y-PULLY
'LIMIT THE DISTANCE (OX,OY)
L=SQR(OX*OX+OY*OY)
IF L>7 THEN
OX=OX/L*7
OY=OY/L*7
END IF
'RE-POSITION THE SPRITE
S=SPRT+C+R*7
SPRITE S,C*24+24+OX-LEF,R*24+112+OY-TOP,
END SUB

'USED TO STORE THE CURRENT POSITION OF THE SRC THING
GLOBAL SRCX,SRCY

'WHEN SWAP THE SRC THING, IT IS AT AN UNKNOW POSITION, READ THE POSITION AND STORE IT
'ONLY ONE THING CAN BE SWAPED AT A TIME, SO IT'S OK...
SUB SRCGRABPOS(C,R)
S=SPRT+C+R*7
SRCX=SPRITE.X(S)
SRCY=SPRITE.Y(S)
END SUB

'... AND COMPUTE AN ANIM TO REACH IT'S DEST
SUB SRCHORIZ(C,R,P,T)
S=SPRT+C+R*7
'DESTINATION COORDS
DX=C*24+24+P-LEF
DY=R*24+112-TOP
FT=EASE(2,0,T)
'COMPUTE DISTANCE TO TRAVEL
X=DX-SRCX
Y=DY-SRCY
SPRITE S,SRCX+X*FT,SRCY+Y*FT,
END SUB



SUB CLEARBOARD
FOR C=0 TO 6
FOR R=0 TO 7
THINGS(C,R)=-1
NEXT R
NEXT C
END SUB

'SEARCH FOR AN EMPTY SLOT FROM THE BOTTOM
'IN C COLUMN INDEX
'OUT R ROW INDEX
SUB FREESLOT(C,R)
FOR R=7 TO 0 STEP -1
IF THINGS(C,R)<0 THEN EXIT SUB
NEXT R
R=-1
END SUB



'START ANIMATE A THINGS THAT DROP FROM ROW P
'IN C COLUMN INDEX
'IN R ROW INDEX
'IN A ANIMATION TYPE
'IN P PARAMETER
'IN S ANIMATION PROGRESS SPEED
'IN D DELAY BEFORE ANIM
SUB ADDANIM(C,R,A,P,S,D)
ANIMATIONS(C,R,0)=A
ANIMATIONS(C,R,1)=D
ANIMATIONS(C,R,2)=P
ANIMATIONS(C,R,3)=0
ANIMATIONS(C,R,4)=S
END SUB

PAILETTES:
'LIST OF CHARA NUM FOR DISSAPEAR ANIMS
DATA 96,96,96,97,97,97,98,98,98,99,99,99,100,100,100,0,-1
PARTICLE 0 DATA PAILETTES

DISSAPEARING:
DATA 0 :'APPEARANCE
DATA 1 :'SHAPE
DATA 6,0 :'OUTER,INNER
DATA 0,0 :'ARC,ROTATION
DATA 0,3,10 :'INITIAL SPEED X,Y,GRAVITY
DATA 5,1,2 :'COUNT,DELAY,REPEAT
EMITTER 0 DATA DISSAPEARING

'UPDATE AN ANIMATION FOR ONE THING
'IN C COLUMN INDEX
'IN R ROW INDEX
'A ANIMATION TYPE
'D DELAY BEFORE ANIM
'P PARAMETER
'T TIME PROGRESS
SUB UPDANIM(C,R)
  'WAIT FOR DELAY TO REACH ZERO
  D=ANIMATIONS(C,R,1)
  IF D>0 THEN
  ANIMATIONS(C,R,1)=D-1
  EXIT SUB
  END IF
  'UPDATE PROGRESS FOR THE NEXT FRAME
  T=ANIMATIONS(C,R,3)
  IF T<1 THEN ANIMATIONS(C,R,3)=T+ANIMATIONS(C,R,4)
  'SPECIFIC CODE DEPENDING ON THE ANIMATION TYPE
  P=ANIMATIONS(C,R,2)
  'TRACE C,R,ANIMATIONS(C,R,0)
  ON ANIMATIONS(C,R,0) GOTO UA_NOTHING, UA_DROP, UA_DST_HORIZ, UA_DST_VERT, UA_SRC_HORI, UA_NOTHING, UA_MATCH

'A THING IS DROPPING FOR IT'S PREVIOUS POSITION
UA_DROP:
  IF T=0 THEN CALL USESPRITE(C,R,P,0)
  IF T<1 THEN CALL THINGDROPING(C,R,P,T)
  IF T>=1 THEN CALL USECELL(C,R)
  EXIT SUB

'THE DESTINATION THING ARE SWAPING
UA_DST_HORIZ:
  IF T=0 THEN CALL USESPRITE(C,R,0,0)
  IF T<1 THEN CALL DSTHORIZ(C,R,P,T)
  IF T>=1 THEN CALL USECELL(C,R)
  EXIT SUB

'THE DESTINATION THING ARE SWAPING
UA_DST_VERT:
  EXIT SUB

'THE SOURCE THING ARE SWAPING
UA_SRC_HORI:
  IF T=0 THEN CALL SRCGRABPOS(C,R)
  IF T<1 THEN CALL SRCHORIZ(C,R,P,T)
  'IF T>=1 THEN CALL CHECKHORIZ(C,R)
  EXIT SUB

UA_MATCH:
  IF T=0 THEN
   CALL FLASHCELL(C,R)
  ELSE IF T>=1 THEN
   CALL HIDECELL(C,R)
   EMITTER 0 ON C*24+32-LEF,R*24+120-TOP
   ANIMATIONS(C,R,0)=0
  END IF
  EXIT SUB

UA_NOTHING:

END SUB

'UPDATE ALL THE ANIMATIONS FOR EVERY THING
SUB UPDANIMS
FOR C=0 TO 6
FOR R=0 TO 7
CALL UPDANIM(C,R)
NEXT R
NEXT C
END SUB

'USED TO DELAY THE ANIM TO MAKE IT COOL
GLOBAL DROPDELAY
DROPDELAY=0

'DROP A NEW THING INTO COLUMN C
SUB DROPTHING(C)
'LOOK FOR FIRST FREE SLOT IN THE COLUMN C
R=-1
CALL FREESLOT(C,R)
'NO FREE SLOT
IF R<0 THEN EXIT SUB
THINGS(C,R)=INT(RND*3)
CALL ADDANIM(C,R,1,-7*24,1/30,DROPDELAY)
ADD DROPDELAY,1
END SUB

MAIN:

BG SOURCE ROM(3)

BG 1
'BG#1 USE TO DRAW STATIC THINGS
SCROLL 1,LEF,TOP
'BG#3 USE TO DRAW MARKED THINGS
SCROLL 3,LEF,TOP



HM:
WAIT VBL
IF NOT TOUCH THEN GOTO HM


RESET:
  RANDOMIZE TIMER
  CALL CLEARBOARD
  FOR C=0 TO 7
  FOR R=0 TO 6
  CALL DROPTHING(R)
  NEXT R
  NEXT C

  CALL SCANBOARD
  CALL SEARCHMATCH
  CALL MARKMATCH(MATCHC,MATCHR)

  'IF A THING IS ALREADY SWAPING, USED TO PREVENT SWAPING MULTIPLE THINGS AT THE SAME TIME
  SWAPING=0

'TX,TY TOUCH AS CELL COORDS
GAME:
  TRACE "GAME"
  DO
  TX=(TOUCH.X+LEF)\8
  TY=(TOUCH.Y+TOP)\8
  IF TAP AND TX>=3 AND TY>=14 AND TX<=23 AND TY<=37 THEN GOTO BEGINSWAP
  CALL UPDMATCH
  CALL UPDANIMS
  WAIT VBL
  DROPDELAY=MAX(0,DROPDELAY-1)
  LOOP

'ONE THING HAS BEEN TAPPED
'SC,SR SOURCE COLOWN AND ROW
BEGINSWAP:
  TRACE "BEGIN"
  SC=(TX-3)\3
  SR=(TY-14)\3
  CALL USESPRITE(SC,SR,0,48)
  PULLX=TOUCH.X
  PULLY=TOUCH.Y
  DO
  CALL PULLTHING(SC,SR)
  TX=(TOUCH.X+LEF)\8
  TY=(TOUCH.Y+TOP)\8
  IF NOT TOUCH AND TX>=3 AND TY>=14 AND TX<=23 AND TY<=37 AND NOT SWAPING THEN GOTO DETECTSWAP
  CALL UPDANIMS
  WAIT VBL
  DROPDELAY=MAX(0,DROPDELAY-1)
  LOOP

'CHECK IF A SECOND THING AS BEEN TOUCHED
'IC,IR OFFSET IN COLUMNS AND ROWS, USED TO DETECT SWAP
DETECTSWAP:
  TRACE "DETECT"
  IC=(TX-3)\3-SC
  IR=(TY-14)\3-SR
  SWAPING=-1
  IF IC>0 AND IR=0 AND SC<6 THEN GOTO SWAPRIGHT
  IF IC<0 AND IR=0 AND SC>1 THEN GOTO SWAPLEFT
  IF IC=0 AND IR<0 AND SR>1 THEN GOTO SWAPUP
  IF IC=0 AND IR>0 AND SR<7 THEN GOTO SWAPDOWN
  SWAPING=0
  CALL USECELL(SC,SR)
  GOTO GAME

SWAPRIGHT:
  TRACE "RIGHT"
  CALL ADDANIM(SC,SR,4,24,1/10,0)
  CALL ADDANIM(SC+1,SR,2,-24,1/10,0)
  GOTO GAME

SWAPLEFT:
  TRACE "LEFT"
  CALL ADDANIM(SC,SR,4,-24,1/10,0)
  CALL ADDANIM(SC-1,SR,2,24,1/10,0)
SWAPUP:
SWAPDOWN:
  GOTO GAME


#1:MAIN PALETTES
051D2026002A01260012012600030604
00020202000C0D0A003F2A15002E0000

#2:MAIN CHARACTERS
00000000000000000000000000000000
FFFFFFFFFFFFFFFF0000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000102050000000000010306
0000000000FFF8BC0000000000FF0743
0000000000804020000000000080C0E0
00000000000000010000000000000001
000000001C3CDF00000000001C24F3FF
00000000000080C000000000000080C0
00000000000000000000000000000003
00000000003E6713000000003E4198EC
00000000000000000000000000008080
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
07070705030303030404040602020202
F4DCFC7CE8BBF87B0B23038317470787
2020202040C040C0E0E0E0E0C0C0C0C0
02040505050402030307060606070303
70C080000001030F8F3F7FFFFFFFFFFF
606060E0E0E0C0C0E0E0E0E0E0E0C0C0
03060707030403040409080C0F0F0F07
EF7630E7EC0EEF07118FCF18F3F1F8FF
808000C0E060F0D08080C020109030F0
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
03030301000000000202020100000000
E8BBFBFF00000000174707FF00000000
40C0C08000000000C0C0C08000000000
01000000000000000100000000000000
FFFF3C0000000000FFFF3C0000000000
80000000000000008000000000000000
03000000000000000300000000000000
E807080700000000FF1F0F0700000000
30D020C000000000F0F0E0C000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
0000000003070E0D0000000000010306
00000000FFFFF8BC0000000000FF0743
00000000C0E07030000000000080C0E0
00000000000103030000000000000001
0000003E7EFFDF00000000001C24F3FF
0000000000C0E0E000000000000080C0
000000000001070C0000000000000003
0000007FC1BE6713000000003E4198EC
0000000080C040400000000000008080
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
0F0F0F0D0F0707070404040602020202
F4DCFC7CE8BBF87B0B23038317470787
3030303070E060E0E0E0E0E0C0C0C0C0
0E0C0D0D0D0C0E070307060606070303
70C080000001030F8F3F7FFFFFFFFFFF
707070F0F0F0F0E0E0E0E0E0E0E0C0C0
1B1617171314131C0409080C0F0F0F07
EF7630E7EC0EEF07118FCF18F3F1F8FF
C0E030D8E868F8D88080C020109030F0
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
07070707030000000202020100000000
E8BBFBFFFF000000174707FF00000000
60E0E0E0C0000000C0C0C08000000000
07030100000000000100000000000000
FFFFFF7E00000000FFFF3C0000000000
E0C08000000000008000000000000000
0F070000000000000300000000000000
E8E7381F0F000000FF1F0F0700000000
38D838F0E0000000F0F0E0C000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
10193E3E7C7C9C040006000002026000
000008081E7C0800040C143661801408
000200802E08084000021CFC32162E40
0020051042000042002005104A140042
00000820081400000000082008140000

#3:MAIN BG
00001410040005000600070108020901
0A030B030C0300000000000000000000
00000000000000000000000014001500
16001701180119011A031B031C030000
00000000000000000000000000000000
00000000240025002600270128012901
2A032B032C0300000000000000000000
00000000000000000000000000070107
00070007000700070007010700070000
00000000000000000000000000000000
00000000010701070107010701070107
00070107000700000000000000000000
00000000000000000000000000070107
00070007000700070007010700070000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000

