'GFX VERSION: 0.30


'BECAUSE OF DIFFERENCE IN DEVICE RATIO, ONLY 177X288 PIXELS WILL BE USED TO DRAW CONTENT.
'USABLE BG CELL: 22X36.
'ALSO, I SHOULD AVOID THE TOP 20 PIXELS AND BOTTOM 10 PIXELS, AS THEY MAY NOT BE IN THE SAFE AREA.

'ALLOW TO EDIT 7648 CELLS, SO ROUGHLY 87X87 CELLS



'TODO:
'(X) HOW MANY BUTTONS CAN I FIT IN THE BOTTOM FOR A BG EDITOR WITH: CHARA LIST, PALETTE, PAINT/PAN, HORI/VERT, OTHER(RECT/PALETTE/PRIORITY/COPY/PASTE), UNDO, FILE, BACK. WITH 22 CELLS WIDE, I CAN FIT 7.3333 BUTTONS OF 3 CELLS WIDE.
'(X) FOR THE CHARA LIST, I NEED 16 CELLS WIDE. HOW MANY CELLS I NEED IN HEIGHT? I HAVE 36: 2 FOR THE BUTTON, 1 SPACER BETWEEN USER AND CHARALIST, 1 SPACE BETWEEN CHARALIST AND BTN. SO 36-2-1-1 = 32, THAT A LOT. BUT, ON THE SIDE OF THE CHARALIST? 22-16 = 6 CELLS.
'( ) CHANGE ALL COLOR TO GREY WHEN RASTER REACH THE BOTTOM
'( ) EXCLUDE SAFE.TOP FROM BG EDITION, HOW? USE PALETTE SWITCH
'( ) EXPOSE PARTICLE REGISTER INTO MEMORY MAPPING
'(X) A DMA FAST BYTES COPY USING REGISTERS MAPPED IN MEMORY
'( ) BG RENDER MODE THAT CLIP INSTEAD OF LOOP, WILL WORK ONLY IF THE BG COORDS NOT LOOP EITHER
'(X) FIX BG SCROLL Y STUCK AT 255 INSTEAD OF 512
'(-) TRY TO DMA COPY FROM ROM FOR UI. NO, BECAUSE I ALSO USED UNCOLD CHARA IN THOSE CHARA NUM.
'( ) COMPUTE MAXIMUM USER BG SIZEM 86=$C9C8, 87=$CB22, 100=$DE20, 101=$DFB2
'( ) DURING LOADING OF BG CHECK IF CAN BE LOADED
'(X) LOAD PALETTES
'(X) CAN SELECT PALETTE
'(X) I NEED TO STORE PALETTE IN RAM TO DMA COPY FROM RASTER
'(X) DESIGN A GENERIC FILE SAVE/LOAD
'( ) ALLOW TO PAN THE USER'S CHARA LIST
'(X) CAN I REUSE THE USER CHARA FROM $9400? YES, CONTINUE PLEASE, I HAVE TO MOVE THE MEMORY MAPPING NOW, CONTINUE AT A400..$DFC0
'(x) IMPLEMENT A VIRTUAL BG AND SHOW BLACK BORDER
'( ) SECOND BTN BAR FOR MAP EDITOR: SWITCH FOR CHAR,PAL,FLIP AND PRIO, SHOW/HIDE PRIO, COPY/PASTE
'( ) CAN SAVE LOAD BG
'( ) CAN PAN USER BG





'MEMORY:
'$00000..$08000   32KIBI BGS MORE AND BIGGER
'$08000..$09000    4KIBI CHR SAME
'$09000..$0E000   20KIBI RAM SAME
'$0E000..$0F800    6KIBI SAV BIGGER
'$0F800..$0FB00      768
'$0FB00..$0FF00    1KIBI SPR X4 1024 SPRITES
'$0FF00..$0FF20       32 COL SAME
'$0FF20..                VID SAME
'$0FF40..                SND SAME
'$0FF70..                IOR TOUCH USE FLOAT
'      ..$10000
'$10000..$20000  64KIBI ROM


'PAL#0: USER CURRENT PALETTE
'PAL#1: USER CURRENT PALETTE COLOR 0
'PAL#2: USER CURRENT PALETTE COLOR 1
'PAL#3: USER CURRENT PALETTE COLOR 2
'PAL#4: USER CURRENT PALETTE COLOR 3
'PAL#6-7: USED BY EDITOR UI
'BG#0: EDITOR UI
'BG#1: USER CHARA LIST
'BG#2: BLACK SEPARATION
'BG#3: USER BG
'SPRITE#0: TOUCHED PIXEL
'SPRITE#1..15: BTN ICON
'SPRITE#16..19: 1X1 CELL CURSOR
'SPRITE#20..31: 5X2 CELL CURSOR
'SPRITE#32.. : CHARA EDITOR GRID
'MEM$9000..$9400 64 CHARAS FOR THE EDITOR UI
'MEM$9400..$A400 256 USER'S CHARAS
'MEM$A400..$DFC0 7648 USER'S MAP CELLS
'MEM$DFC0..$DFE0 32 COLORS FOR MAP
'MEM$DFE0..$E000 32 COLORS FOR UI
'CHARA#0..64 WILL ALTERNATIVELY CONTAINING USER'S CHARAS FOR THE BG AND EDITOR UI CHARAS
'CHARA#64..128 WILL ALTERNATIVELY CONTAINING USER'S CHARAS FOR THE BG AND USER'S CHARAS DISPLAYED IN THE CHARA LIST
'CHARA#128..256 CONTAINS USER'S CHARAS FOR THE BG



'=============DATA_MANIPULATION:

SUB SETPALETTE(P)
'START USING A DIFFERENT USER PALETTE
'IN P PALETTE INDEX [0..7]
A=$DFC0
D=$DFE0
'COPY THE SELECT PALETTE, PAL#0
COPY A+P*4,4 TO D
'COPY THE INDIVIDUAL COLORS, PAL#1..4
FOR I=0 TO 3
FOR J=0 TO 4
POKE D+4+I*4+J,PEEK(A+P*4+I)
NEXT J
NEXT I
'UI COLOR, PAL#6..7
COPY ROM(1)+24,8 TO D+24
END SUB

SUB CHARACOPY(A,S,C,B,D)
'COPY A CHARA FROM A ROM TO THE MEMORY
'IN A SRC BASE ADDRESS
'IN S SRC CHARA INDEX
'IN C CHARA COUNT TO COPY
'IN B DST BASE ADDRESS
'IN D DST CHARA INDEX
COPY A+S*16,C*16 TO B+D*16
END SUB

SUB CHARAPSET(A,C,X,Y,V)
'SET A PIXEL OF A CHARA AT A MEMORY LOCATION
'IN A BASE ADDRESS
'IN C DEST CHAR INDEX
'IN X,Y SOURCE CELL COORDS
'IN V COLOR VALUE
'LOCAL R CHAR ADDRESS
'LOCAL B LOW OR HIGH COLOR BIT
'LOCAL I ITERATOR
R=A+C*16+(Y AND 7)
B=V AND 1
FOR I=0 TO 1
ROL R,1+X
POKE R,(PEEK(R) AND 254) OR B
ROR R,1+X
R=R+8
B=(V AND 2)\2
NEXT I
END SUB

SUB PIXELTOCELL(A,C,X,Y,S)
'CONVERT CHARA PIXEL TO BG CELL, ROW BY ROW
'IN A BASE ADDRESS
'IN C SOURCE CHAR INDEX
'IN X,Y DEST CELL COORDS
'IN S THE FIRST Y/4 LINE TO REDRAW
'LOCAL R CHAR ADDRESS
'LOCAL I,J Y AND X ITERATOR
R=A+C*16+S
FOR I=S TO 7 STEP 4
FOR J=7 TO 0 STEP -1
CELL X+J,Y+I,(PEEK(R) AND 1)+(PEEK(R+8) AND 1)*2
ROR R,1
ROR R+8,1
NEXT J
R=R+4
NEXT I
END SUB

'====================UI_RELATED:

SUB ICON(I,C,P)
'TAKE THE ASSET FROM THE ROM, AND COPY IT TO SHOW AN ICON BTN USING SPRITE
'IN I ICON ID 1..7
'IN C COLD CHARA NUM
'IN P PALETTE
'SPRITE#1..15: BTN ICON
N=48+I*2
'TO SHOW IT NOW
CALL CHARACOPY(ROM(2),C,2,$8000,N)
'TO SHOW IT DURING RASTER
CALL CHARACOPY(ROM(2),C,2,$9000,N)
S=I*2+1
X=5+24*I-LEF
IF I THEN ADD X,8
Y=BOTE-17
trace "ICON",s,x,y,n
SPRITE S,X,Y,N
SPRITE S+1,X+8,Y,N+1
SPRITE S PAL P PRIO 1
SPRITE S+1 PAL P PRIO 1
END SUB

SUB CLEARICON(I)
S=I*2+1
SPRITE S,,,0
SPRITE S+1,,,0
END SUB

SUB BTN(T,OY)
'OUT T NUMBER OF BTN TAPPED, START AT 1
CY=((TOUCH.Y-BOTS)\8)-OY
CX=(TOUCH.X+LEF+23)\8
IF CY>=5 AND CY<=7 THEN
'1ST BTN TAPPED
IF CX>=3 AND CX<=5 THEN T=1
'OTHER BTN TAPPED
IF CX>=7 AND CX<=24 THEN T=(CX-1)\3
END IF
END SUB

SUB CURSOR1X1(X,Y)
X=X*8-LEF-23
Y=Y*8+BOTS
SPRITE 16,X-2,Y-2,63
SPRITE 17,X+2,Y-2,63
SPRITE 18,X-2,Y+2,63
SPRITE 19,X+2,Y+2,63
END SUB
SPRITE 16 PAL 6
SPRITE 17 PAL 6 FLIP 1,0
SPRITE 18 PAL 6 FLIP 0,1
SPRITE 19 PAL 6 FLIP 1,1

SUB CURSOR5X2(X,Y)
X=X*8-LEF-23
Y=Y*8+BOTS
SPRITE 20,X-2,Y-2,63
SPRITE 21,X+26,Y-2,63
SPRITE 22,X-2,Y+10,63
SPRITE 23,X+26,Y+10,63
SPRITE 24,X-2,Y+4,62
SPRITE 25,X+26,Y+4,62
SPRITE 26,X+5,Y-2,44
SPRITE 27,X+19,Y-2,44
SPRITE 28,X+12,Y-2,44
SPRITE 29,X+5,Y+10,44
SPRITE 30,X+19,Y+10,44
SPRITE 31,X+12,Y+10,44
END SUB
SPRITE 20 PAL 6
SPRITE 21 PAL 6 FLIP 1,0
SPRITE 22 PAL 6 FLIP 0,1
SPRITE 23 PAL 6 FLIP 1,1
SPRITE 24 PAL 6
SPRITE 25 PAL 6 FLIP 1,0
SPRITE 26 PAL 6
SPRITE 27 PAL 6
SPRITE 28 PAL 6
SPRITE 29 PAL 6 FLIP 0,1
SPRITE 30 PAL 6 FLIP 0,1
SPRITE 31 PAL 6 FLIP 0,1

FOR S=32 TO 62:SPRITE S PAL 6:NEXT S

'=================FILE_SELECTOR:

GLOBAL SAVING,LOADING

'USED TO GET OPERATION RESULT
SAVING=0
LOADING=0

SUB FILESELECTOR(F)
'SHOW A FILE SELECTOR
'OUT F THE SELECTED FILE NUM

  'CLEAR PREVIOUS STUFF
  ON RASTER OFF
  SPRITE OFF
  CLS
  COPY ROM(1),32 TO $FF00
  COPY ROM(2),$1000 TO $08000
  FONT 192
  'PRINT A LIST OF FILES
  BG 3
  PAL 7
  FOR I=0 TO 15
  Y=I*2
  NUMBER 0,Y,I,2
  TEXT 3,Y,FILE$(I)
  NEXT I
  SCROLL 3,LEF,TOP-4

FS_FILE:
'WAIT FOR FILE SELECTION
  DO
  WAIT TAP
  F=(TOUCH.Y+TOP-4)\16
  IF F>=0 AND F<=15 THEN GOTO FS_BOX
  LOOP

FS_BOX:
'PRINT OPERATION
  'OFFSET FOR ALL BGS
  Y=F*16
  'SELECTED BOX
  BG 2
  PAL 6
  BG SOURCE ROM(4)
  BG COPY 0,8,28,5 TO 0,0
  SCROLL 2,0,TOP-Y
  'PRINT THE FILENAME AGAIN
  BG 1
  PAL 6
  'Y=F*2
  NUMBER 0,0,F,2
  TEXT 3,0,FILE$(F)
  SCROLL 1,LEF,TOP-4-Y
  'PRINT OPERATIONS
  BG 0
  TEXT 0,3,"CANCEL"
  TEXT 9,3,"SAVE"
  TEXT 17,3,"LOAD"
  SCROLL 0,LEF,TOP-Y

FS_OPE:
'WAIT FOR OPERATION SELECTION
  DO
  WAIT TAP
  CX=(TOUCH.X+LEF)\8
  CY=(TOUCH.Y+TOP)\8-F*2
  IF CY<>3 THEN GOTO FS_OPE
  IF CX>=0 AND CX<=5 THEN EXIT SUB
  IF CX>=9 AND CX<=12 THEN GOTO FS_SAVE
  IF CX>=17 AND CX<=20 THEN GOTO FS_LOAD
  LOOP

FS_SAVE:
  'CHANGE BOX COLOR TO PINK
  COPY $FF00+5*4,4 TO $FF00+7*4
  CALL FS_CONFIRM(F,SAVING)
  EXIT SUB

FS_LOAD:
  'CHANGE BOX COLOR TO YELLOW
  COPY $FF00+4*4,4 TO $FF00+7*4
  CALL FS_CONFIRM(F,LOADING)
  EXIT SUB

END SUB

SUB FS_CONFIRM(F,CONFIRM)
'ASK FOR CONFIRMATION
  'OUT F FILE NUM
  'OUT CONFIRM 0=FALSE 1=TRUE
  CLS 3
  BG 0
  CLS 0
  TEXT 0,3,"CANCEL"
  TEXT 14,3,"CONFIRM"
  'RANDOMIZE POSITION
  R=F
  WHILE R=F
  R=RND(15)
  WEND
  SCROLL 0,LEF,TOP-R*16
  SCROLL 1,LEF,TOP-4-R*16
  SCROLL 2,0,TOP-R*16
  'WAIT FOR CANCELLATION OR CONFIRMATION
  DO
  WAIT TAP
  CX=(TOUCH.X+LEF)\8
  CY=(TOUCH.Y+TOP)\8-R*2
  IF CY<>3 THEN
  ELSE IF CX>=0 AND CX<=5 THEN
  CONFIRM=0
  EXIT SUB
  ELSE IF CX>=14 AND CX<=20 THEN
  CONFIRM=1
  EXIT SUB
  END IF
  LOOP

END SUB



'==================FILE_RELATED:

SUB LOADPALETTES(F)
LOAD F,$DFC0,32
END SUB










'==========================MAIN:

SYSTEM 0,1
GLOBAL TOP,LEF
TOP=(288-SHOWN.H)\2
LEF=(177-SHOWN.W)\2
FONT 0
TRACE "SHOWN",SHOWN.W,SHOWN.H
TRACE "LEF,TOP",LEF,TOP

'WHERE TO PLACE THE BOTTOM PANEL ON Y AXIS AND WHERE IT STOP
GLOBAL BOTS,BOTE
BOTE=SHOWN.H-SAFE.B

'KEEP EDITOR CHARA FOR UI INTO RAM FOR COPY IT BACK DURING RASTER
COPY ROM(2)+$0,$400 TO $9000

GLOBAL CHARA,list,COLO
'THE CURRENT SELECTED CHARA, OR THE FIRST ONE
CHARA=1
'the chara num shown at the top left corner of the chara list
list=0
'THE CURRENT SELECTED COLOR
COLO=1

'FILE NUM OF EDITABLE CHARA
CHARF=2
'LOAD EDITABLE CHARA
GOSUB CO_LOAD

'THE CURRENT SELECTED PALETTE
PALE=0

'WIDTH AND HEIGHT OF THE EDITED MAP
MAPW=64
MAPH=64
'FILE NUM OF EDITABLE MAP
MAPF=3
'LOAD EDITABLE MAP
GOSUB MO_LOAD





'TEMP PALETTE
'LOAD 2,$FF00,$4
CALL LOADPALETTES(1)


'THE CURRENT EDITING TOOL FOR THE MAP
'0 PAN THE MAP
'1 PAINT THE MAP USING
MAPTOOL=0
'INDIQUATE WHICH CHARA NUM TO USE FOR THE ICON OF THE MAP TOOL
MAPTOOLCHARA:
DATA 66,64

'THE CURRENT FLIP SETTINGS
'0 NO FLIP
'1 HORI FLIP
'2 VERT FLIP
'3 HORY AN VERT FLIP
MAPFLIP=0
'INDIQUATE WHICH CHARA NUM TO USE FOR THE ICON OF THE MAP FLIP SETTING
MAPFLIPCHARA:
DATA 70,72,74,76





CHARTOOL=0

CHARTOOLCHARA:
DATA 66,64

goto mapeditor
'GOTO CHAREDITOR




'====================MAP_EDITOR:

MAPEDITOR:
'SHOW A BIG SPACE FOR THE USER'S EDITABLE BG, A LIST OF USER'S CHARA DO CHOOSE TO PAINT WITH, AND A BUNCH OF EDITOR UI GADGETS.
'FOR THE MAP, ALL 256 CHARA DATA WILL BE ALLOCATED TO USER'S CHARA
'AFTER A SPECIFIC RASTER THE FIRST 64 CHARA DATA WILL BE USED BY EDITOR UI CHARA, AND THE NEXT 64 CHARA DATA WILL BE ALLOCATED FOR THE CURRENTLY SELECTABLE USER'S CHARA LIST.
'THOSE CHARA NEED TO BE COPIED FROM MEMORY USING THE FAST DMA COPY COMMAND.

  'PX,PY CURRENT TOUCH
  'BX,BY TAPPED TOUCH
  'DX,DY DELTA TOUCH
  'OX,OY ORIGINAL SCROLL BEFORE PAN
  'EX,EY TAPPED BG CELL
  'FX,FY PREVIOUS TAPPED BG CELL
  'BC TAPPED CHARA NUM
  'CC CURRENT CHARA NUM

SUB MAPRASTER
'WILL REPLACE THE CHARA DATA ALTERNATIVELY BY THE ONE NEEDED BY THE EDITOR UI AND BY THE USER'S ONES.
  R=RASTER
  'COPY 64 CHARAS FOR EDITOR UI SO $400.
  'ALSO COPY 64 USER'S CHARAS FOR THE CHARA LIST.
  IF R=BOTS THEN
  POKEW $FFA0,$9000
  POKEW $FFA2,$400
  POKEW $FFA4,$8000
  DMA COPY
  POKEW $FFA0,$9400
  POKEW $FFA2,$400
  POKEW $FFA4,$8400
  DMA COPY
  'COPY PALETTE FOR CHARA LIST AND UI.
  COPY $DFE0,32 TO $FF00
  ELSE IF R=0 THEN
  'COPY BACK THE 128 USER'S CHARA DATA FOR THE MAP.
  POKEW $FFA0,$9400
  POKEW $FFA2,$800
  POKEW $FFA4,$8000
  DMA COPY
  'COPY PALETTE FOR BG
  COPY $DFC0,32 TO $FF00
  END IF
END SUB

  CLS
  SPRITE OFF
  BOTS=BOTE-64
  ON RASTER CALL MAPRASTER

  'DRAW EDITOR UI AT THE BOTTOM OF THE SCREEN MINUS THE SAFE ZONE
  BG SOURCE ROM(3)
  BG 0
  BG COPY 0,0,28,8 TO 0,0
  SCROLL 0,LEF+23,-BOTS

  'SETUP BUTTON ICONS
  GOSUB ME_BACK0

  'ID OF THE BUTTON BAR
  '=0 PAINT,PALETTE,FLIP...
  '=7 SIZE,MOVE,SAVE...
  BTNBAR=0

  'SELECT PALETTE
  CALL SETPALETTE(PALE)

  'SHOW SELECTED CHARA
  GOSUB ME_CHARACURSOR

  'COPY USER'S CHARA FOR BG
  'NOTE: USED FOR THE 1ST SCREEN RENDERING, BEFORE THE 1ST VBL
  COPY $9400,$1000 TO $8000

  'COPY THE MAP
  'TODO: USE MAP WIDTH AND HEIGHT
  BG SOURCE $A400+4,MAPW,MAPH
  BG 3
  BGLEFT=0
  BGTOP=0
  BG COPY BGTOP,BGLEFT,SHOWN.W\8,SHOWN.H\8 TO 0,0
  'TODO: RESET IF OUT OF BOUND
  BGX=0
  BGY=0
  SCROLL 3,BGX,BGY

  'BLACK MASK TO HIDE THE MAP WHERE THE BOTTOM PANEL IS
  BG 2
  PAL 7
  BG FILL 0,0 TO 27,7 CHAR 3
  SCROLL 2,LEF+23,-BOTS

  'COPY THE USER'S CHARA DATA FOR THE CHARA LIST
  BG 1
  PAL 0
  FOR I=0 TO 63
  X=I MOD 16
  Y=I\16
  CELL X,Y,I+64
  NEXT I
  SCROLL 1,LEF+23-48-24,-BOTS-8

ME_WAITUSER:
  DO
  'DETECT USER INTERACTION
  T=0
  GOSUB ME_DETECT
  'BTN TAPPED
  IF T>0 THEN ON T-1+BTNBAR GOSUB ME_PAINTPAN, ME_PALETTE, ME_FLIP, ME_UNDO, ME_MORE, ME_SETTINGS, ME_BACK, ME_BACK0, ME_RESIZE, ME_MOVE, ME_NOTHING, ME_NOTHING, ME_SAVE, ME_NOTHING
  'BG INTERACTED
  IF T<0 THEN ON ABS(T)-1 GOTO ME_USERPAN, ME_USERPAINT, ME_USERCHARA
  WAIT VBL
  LOOP

'DETECT TOOL ACTIVATION USING TOUCH
'SPR#0: TOUCHED PIXEL
ME_DETECT:
  IF NOT TAP THEN RETURN
  PX=TOUCH.X
  PY=TOUCH.Y
  SPRITE 0,PX,PY,29
  SPRITE 0 PAL 6 SIZE 0
  'TOUCHED CELLS RELATIVE TO THE BOTTOM PANEL
  CY=(PY-BOTS)\8
  CX=(PX+LEF+23)\8
  BG 0
  PAL 7
  TEXT 1,1,STR$(INT(CX))+"!!"
  TEXT 1,4,STR$(INT(CY))+"!!"
  'USER BG TOUCHED
  IF CY<0 AND MAPTOOL=0 THEN T=-1
  IF CY<0 AND MAPTOOL=1 THEN T=-2
  'BTN TOUCHED
  CALL BTN(T,0)
  'CHARA LIST TOUCHED
  IF CY>=1 AND CY<=4 AND CX>=9 AND CX<=24 THEN T=-3
  RETURN

ME_NOTHING:
  RETURN

ME_PAINTPAN:
TRACE "PAINTPAN"
  ADD MAPTOOL,1,0 TO 1
ME_1ST_BUTTON:
  RESTORE MAPTOOLCHARA
  SKIP MAPTOOL
  READ N
  CALL ICON(0,N,6)
  RETURN

ME_PALETTE:
TRACE "PALETTE"
  PALE=(PALE+1) MOD 8
  CALL SETPALETTE(PALE)
ME_2ND_BUTTON:
  CALL ICON(1,68,0)
  RETURN

ME_FLIP:
TRACE "FLIP"
  ADD MAPFLIP,1,0 TO 3
ME_3RD_BUTTON:
  RESTORE MAPFLIPCHARA
  SKIP MAPFLIP
  READ N
  CALL ICON(2,N,6)
  RETURN

ME_UNDO:
TRACE "UNDO"
  RETURN

ME_MORE:
TRACE "MORE"
  RETURN

ME_SETTINGS:
TRACE "SETTINGS"
  CALL ICON(0,84,6)
  CALL ICON(1,88,6)
  CALL ICON(2,90,6)
  CALL CLEARICON(3)
  CALL CLEARICON(4)
  CALL ICON(5,86,6)
  BTNBAR=7
  RETURN

ME_BACK:
TRACE "SWITCH"
  WAIT VBL
  GOTO CHAREDITOR

ME_BACK0:
TRACE "BACK0"
  GOSUB ME_1ST_BUTTON
  GOSUB ME_2ND_BUTTON
  GOSUB ME_3RD_BUTTON
  CALL ICON(3,78,6)
  CALL ICON(4,82,6)
  CALL ICON(5,80,6)
  CALL ICON(6,92,6)
  BTNBAR=0
  RETURN

ME_RESIZE:
TRACE "RESIZE"
  RETURN

ME_MOVE:
TRACE "MOVE"
  RETURN

ME_SAVE:
TRACE "SAVE"
  GOTO MAPOPERATOR

'BG PANNING
ME_USERPAN:
  'PRINT TAPPED CELL COORDS
  X=TOUCH.X\8+BGX
  Y=TOUCH.Y\8+BGY
  BG 0
  BG SOURCE ROM(4)
  BG COPY 0,4,5,4 TO 3,1
  IF X>=0 AND X<=MAPW AND Y>=0 AND Y<=MAPH THEN
    TEXT 3,3,RIGHT$("0"+HEX$(X),2)
    TEXT 6,3,RIGHT$("0"+HEX$(Y),2)
  END IF
  'ORIGIN PRESSED PAN IN PIXELS COORDS
  PRESSEDX=TOUCH.X
  PRESSEDY=TOUCH.Y
  'ORIGINAL BG SCROLL POSITION IN CELL COORDD
  OBGX=BGX
  OBGY=BGY
  'NUMBER OF CELLS THAT CAN BE DRAWN
  VIEWX=SHOWN.W\8
  VIEWY=SHOWN.H\8-8
  'PREPARE FOR THE BG COPY COMMAD
  BG SOURCE $A400+4,MAPW,MAPH
  BG 3
  DO
  IF TOUCH THEN
    'DISTANCE TRAVEL IN CELL COORDS
    DISTX=(TOUCH.X-PRESSEDX)\8
    DISTY=(TOUCH.Y-PRESSEDY)\8
    'NEW BG POSITION IN CELL COORDS
    BGX=CLAMP(OBGX-DISTX,-3,MAPW-VIEWX+3)
    BGY=CLAMP(OBGY-DISTY,-3,MAPH-VIEWY+3)
    TRACE BGX,BGY
    'COMPUTE CELL THAT ARE OUT-OF-BOUNDS
    OOLEFT=MAX(0,-BGX)
    OOTOP=MAX(0,-BGY)
    OORIGHT=MAX(0,-MAPW+BGX+VIEWX)
    OOBOTTOM=MAX(0,-MAPH+BGY+VIEWY)
    SCROLL 3,BGX*8,BGY*8
    'REDRAW THE WHOLE BG
    CLS 3
    BG COPY BGX+OOLEFT,BGY+OOTOP,VIEWX-OOLEFT-OORIGHT,VIEWY-OOTOP-OOBOTTOM TO BGX+OOLEFT,BGY+OOTOP
  ELSE
    WAIT VBL
    GOTO ME_WAITUSER
  END IF
  WAIT VBL
  LOOP

'BG PAINTING
ME_USERPAINT:
  FX=-1
  FY=-1
  BG SOURCE $A400+4,MAPW,MAPH
  BG 3
  PAL PALE
  'DETECT BG CELL TOUCHED
  DO
    IF TOUCH THEN

      EX=((TOUCH.X+SCROLL.X(3))\8) MOD 64
      EY=((TOUCH.Y+SCROLL.Y(3))\8) MOD 64
      IF EX<>FX OR EY<>FY THEN
         'TRACE EX,EY
         FX=EX
         FY=EY
         CELL EX,EY,CHARA
         'TODO: HANDLE CUSTOM SIZE
         MCELL EX,EY,CHARA
      END IF

    ELSE
      WAIT VBL
      GOTO ME_WAITUSER
    END IF
  WAIT VBL
  LOOP

'CHARA SELECTION
ME_USERCHARA:
  DO
  IF TAP THEN
    BX=TOUCH.X
    BY=TOUCH.Y
    'SPRITE 0,BX,BY,29
    'SPRITE 0 PAL 6 SIZE 0
    CY=(BY-BOTS)\8
    CX=(BX+LEF+23)\8
    'TRACE CX
    IF CX>=9 AND CY>=1 AND CX<=24 AND CY<=4 THEN
      CHARA=CX-9+(CY-1)*16
      GOSUB ME_CHARACURSOR
      GOSUB ME_CHARANUM
    END IF
  ELSE IF TOUCH THEN
    DX=TOUCH.X-BX
    DY=TOUCH.Y-BY
    TRACE DY\8

  ELSE
    WAIT VBL
    GOTO ME_WAITUSER
  END IF

  WAIT VBL
  LOOP

ME_CHARACURSOR:
  CALL CURSOR1X1((CHARA MOD 16)+9,(CHARA\16)+1)
  RETURN

ME_CHARANUM:
  BG 0
  BG SOURCE ROM(4)
  BG COPY 0,0,5,4 TO 3,1
  TEXT 4,3,RIGHT$("000"+STR$(CHARA),4)
  RETURN



'===================MAP_OPERTOR:

MAPOPERATOR:
  CALL FILESELECTOR(MAPF)
  IF SAVING THEN
    GOSUB MO_SAVE
    MESSAGE "SAVED"
  END IF
  IF LOADING THEN
    GOSUB MO_LOAD
    MESSAGE "LOADED"
  END IF
  GOTO MAPEDITOR

MO_SAVE:
  SAVE MAPF,FILE$(MAPF),$A400,MAPW*MAPH*2+4

  RETURN

MO_LOAD:
  FILL $A400,$3BC0
  LOAD MAPF,$A400,$3BC0
  IF PEEKW($A400)<>0 THEN
    MESSAGE "WRONG FORMAT"
  ELSE
    MAPW=PEEK($A402)
    MAPH=PEEK($A403)

  END IF
  RETURN



'===================CHAR_EDITOR:

CHAREDITOR:
'SHOW A BIG SPACE FOR THE USER'S EDITABLE CHARA, A LIST OF USER'S CHARA

SUB CE_VBL
  'COPY 64 USER'S CHARAS FOR THE CHARA LIST.
  POKEW $FFA0,$9400+list*16
  POKEW $FFA2,$400
  POKEW $FFA4,$8400
  DMA COPY
  'COPY PALETTE FOR CHARA LIST AND UI.
  COPY $DFE0,32 TO $FF00
END SUB

  CLS
  SPRITE OFF
  'THIS IS NECESSARY TO CALL THIS PER FRAME, AS THE COPIED DATA ARE THE SAME, BUT THE DMA COPY IS ONLY ALLOWED DURING INTERRUPT
  ON VBL CALL CE_VBL
  BOTS=BOTE-88

  'DRAW EDITOR UI AT THE BOTTOM OF THE SCREEN MINUS THE SAFE ZONE
  BG SOURCE ROM(3)
  BG 0
  BG COPY 0,1,28,8 TO 0,4
  BG COPY 0,8,28,4 TO 0,0
  SCROLL 0,LEF+23,-BOTS

  'DRAW COLOR BUTTON
  FOR I=1 TO 4
  PAL I
  PRIO 1
  BG FILL I*6-3,1 TO I*6,2 CHAR 1
  NEXT I
  prio 0

  'SETUP BUTTON ICONS
  GOSUB CE_BACK0
  GOSUB CE_2ND_BUTTON

  'ID OF THE BUTTON BAR
  '=0 PAINT,PALETTE...
  BTNBAR=0

  'SELECT PALETTE
  CALL SETPALETTE(PALE)

  'SHOW SELECTED CHARA
  GOSUB CE_CHARACURSOR

  'COPY USER PALETTE
  COPY $DFC0,32 TO $FF00

  'SHOW SELECTED COLOR
  GOSUB CE_COLORCURSOR

  'BLACK MASK TO HIDE THE MAP WHERE THE BOTTOM PANEL IS
  BG 2
  PAL 7
  BG FILL 0,0 TO 27,10 CHAR 3
  SCROLL 2,LEF+23,-BOTS

  'COPY THE USER'S CHARA DATA FOR THE CHARA LIST
  BG 1
  PAL 0
  FOR I=0 TO 63
  X=I MOD 16
  Y=I\16
  CELL X,Y,I+64
  NEXT I
  SCROLL 1,LEF+23-48-24,-BOTS-32

  'WHEN REFRESHING THE CHARA EDITOR, TO REDUCE CPU CONSUMPTION. REFRESH ONLY 2 LINES PER CHARA PER FRAME. IT TOOKS 4 FRAME TO COMPLETELLY REFRESH THE WHOLE EDITABLE SURFACE. R WILL VARY FROM 0 TO 4 AND STOP THERE. THE REFRESH WILL CONTINUE WHEN SOMETHING RESET R TO 0.
  R=0

  'TODO: DO SOMETHING
  CE_X=0
  CE_Y=0
  SCROLL 3,0,0

CE_WAITUSER:
  DO
  'DETECT USER INTERACTION
  T=0
  GOSUB CE_DETECT
  IF T>0 THEN ON T-1+BTNBAR GOSUB CE_PAINTPAN, CE_PALETTE, CE_NOTHING, CE_NOTHING, CE_NOTHING, CE_NOTHING, CE_SWITCH
  'BG INTERACTED
  IF T<0 THEN ON ABS(T)-1 GOTO CE_USERPAN, CE_USERPAINT, CE_USERCHARA, CE_USERCOLOR
  GOSUB CE_REFRESH
  WAIT VBL
  LOOP

'DETECT TOOL ACTIVATION USING TOUCH
CE_DETECT:
  IF NOT TAP THEN RETURN
  'TOUCHED CELLS RELATIVE TO THE BOTTOM PANEL
  CY=(TOUCH.Y-BOTS)\8
  CX=(TOUCH.X+LEF+23)\8
  BG 0
  PAL 7
  TEXT 1,4,STR$(INT(CX))+"!!"
  TEXT 1,7,STR$(INT(CY))+"!!"
  'USER BG TOUCHED
  IF CY<0 AND CHARTOOL=0 THEN T=-1
  IF CY<0 AND CHARTOOL=1 THEN T=-2
  'BTN TOUCHED
  CALL BTN(T,3)
  'CHARA LIST TOUCHED
  IF CY>=4 AND CY<=7 AND CX>=9 AND CX<=24 THEN T=-3
  'COLOR LIST TOUCHED
  IF CY>=1 AND CY<=2 THEN T=-4
  RETURN

CE_NOTHING:
  RETURN

CE_PAINTPAN:
TRACE "PAINTPAN"
  ADD CHARTOOL,1,0 TO 1
CE_1ST_BUTTON:
  RESTORE CHARTOOLCHARA
  SKIP CHARTOOL
  READ N
  CALL ICON(0,N,6)
  RETURN

CE_PALETTE:
TRACE "PALETTE"
  PALE=(PALE+1) MOD 8
  CALL SETPALETTE(PALE)
CE_2ND_BUTTON:
  CALL ICON(1,68,0)
  RETURN


CE_SWITCH:
TRACE "SWITCH"
  WAIT VBL
  GOTO MAPEDITOR


CE_CHARACURSOR:
  CALL CURSOR1X1((CHARA MOD 16)+9,(CHARA\16)+4)
  RETURN

CE_BACK0:
TRACE "BACK0"
  GOSUB CE_1ST_BUTTON
  CALL ICON(6,94,6)
  RETURN

'BG PANNING
CE_USERPAN:
TRACE "PAN"
  'PRINT TAPPED CELL COORDS
  'ORIGINAL TOUCH POSITION AT PRESSED
  PX=TOUCH.X
  PY=TOUCH.Y
  'ORIGINAL BG SCROLL POSITION IN PIXEL
  OX=CE_X
  OY=CE_Y
  'USED TO DETECT IF SOMETHING AS CHANGE
  GX=CE_X
  GY=CE_Y
  'limit right and bottom
  lr=128-ceil(shown.w/8)+3
  lb=128-ceil(shown.h/8)+3+11

  DO
  IF TOUCH THEN
    CE_X=OX-(TOUCH.X-PX)\8
    CE_Y=OY-(TOUCH.Y-PY)\8
    'LIMIT LEFT
    IF CE_X<-3 THEN
      PX=TOUCH.X
      CE_X=-3
      OX=-3
    'limit right
    else if ce_x>lr THEN
      px=touch.X
      ce_x=lr
      ox=lr
    END IF
    if ce_y<-3 then
      py=touch.Y
      ce_y=-3
      oy=-3
    else if ce_y>lb then
      py=touch.y
      ce_y=lb
      oy=lb
    end if
    'CE_Y=CLAMP(CE_Y,0,100)
    SCROLL 3,CE_X*8,CE_Y*8
    ' trace ce_x,lr
    'TRACE CE_X,CE_Y
    IF GX<>CE_X OR GY<>CE_Y THEN
      R=0
      GX=CE_X
      GY=CE_Y
    END IF
  ELSE
    WAIT VBL
    GOTO CE_WAITUSER
  END IF
  GOSUB CE_REFRESH
  WAIT VBL
  LOOP

CE_REFRESH:

  IF R>3 THEN RETURN

  BG 3
  PAL 0

  F=(CE_X\8)+(CE_Y\8)*16
  M=(CE_X\8)*8
  N=(CE_Y\8)*8

  U=(M-CE_X)*8-2
  V=(N-CE_Y)*8-2

  'limit right and bottom
  lr=128-ceil(shown.w/8)+3
  lb=128-ceil(shown.h/8)+3+11

  'CLEAR LEFT EDGE WHEN OUT-OF-BOUNDS
  IF CE_X<0 THEN BG FILL 60,0 TO 63,63 CHAR 0

  'clear right edge when out-of-bounds
  if ce_x>lr-3 then bg fill 0,0 to 3,63 char 0

  'clear top edge when out-of-bounds
  if ce_y<0 then bg fill 0,60 to 63,63 char 0

  'clear bottom edge when out-of-bounds
  if ce_y>lb-3 then bg fill 0,0 to 63,3 char 0

  'DRAW GRID
  S=32
  FOR I=0 TO 256 STEP 64
  FOR J=0 TO 320 STEP 64
  SPRITE S,U+I,V+J,30
  INC S
  NEXT J
  NEXT I

  CALL PIXELTOCELL($9400,F,M,N,R)
  CALL PIXELTOCELL($9400,F+1,M+8,N,R)
  CALL PIXELTOCELL($9400,F+2,M+16,N,R)
  if ce_x<lr then CALL PIXELTOCELL($9400,F+3,M+24,N,R)

  CALL PIXELTOCELL($9400,F+16,M,N+8,R)
  CALL PIXELTOCELL($9400,F+17,M+8,N+8,R)
  CALL PIXELTOCELL($9400,F+18,M+16,N+8,R)
  if ce_x<lr then CALL PIXELTOCELL($9400,F+19,M+24,N+8,R)

  CALL PIXELTOCELL($9400,F+32,M,N+16,R)
  CALL PIXELTOCELL($9400,F+33,M+8,N+16,R)
  CALL PIXELTOCELL($9400,F+34,M+16,N+16,R)
  if ce_x<lr then CALL PIXELTOCELL($9400,F+35,M+24,N+16,R)

  CALL PIXELTOCELL($9400,F+48,M,N+24,R)
  CALL PIXELTOCELL($9400,F+49,M+8,N+24,R)
  CALL PIXELTOCELL($9400,F+50,M+16,N+24,R)
  if ce_x<lr then CALL PIXELTOCELL($9400,F+51,M+24,N+24,R)

  'TODO: I SHOULD BE ABLE TO REMOVE SOME WHEN SHOWN.H IS SHORTER
  CALL PIXELTOCELL($9400,F+64,M,N+32,R)
  CALL PIXELTOCELL($9400,F+65,M+8,N+32,R)
  CALL PIXELTOCELL($9400,F+66,M+16,N+32,R)
  if ce_x<lr then CALL PIXELTOCELL($9400,F+67,M+24,N+32,R)

  INC R
  RETURN

'chara selection
CE_USERCHARA:
trace "chara"
  'used to detect scroll change in the chara list
  ol=list
  DO
  if tap then
    bx=touch.X
    by=touch.y
    'SPRITE 0,BX,BY,29
    'SPRITE 0 PAL 6 SIZE 0
    CY=(BY-BOTS)\8
    CX=(BX+LEF+23)\8
    'trace cy
    IF CX>=9 AND CY>=4 AND CX<=24 AND CY<=7 THEN
      CHARA=CX-9+(CY-4)*16
      gosub ce_characursor
      gosub ce_charanum
    end if
  else if touch then
    dy=(touch.y-by)\8
    list=clamp(ol-dy*16,0,192)
    if ol<>list then
      gosub ce_charanum
    end if
  else
    wait VBL
    goto ce_waituser
  end if
  wait VBL
  loop

CE_USERCOLOR:
  IF ((CX-3)MOD 6)<4 THEN
  COLO=(CX-2)\6
  GOSUB CE_COLORCURSOR
  END IF
  WAIT VBL
  GOTO CE_WAITUSER

CE_COLORCURSOR:
  CALL CURSOR5X2(COLO*6+3,1)
  RETURN

CE_CHARANUM:
'update the num of the selected chara in the bottom panel
  BG 0
  BG SOURCE ROM(4)
  BG COPY 0,0,5,4 TO 3,4
  TEXT 4,6,RIGHT$("000"+STR$(CHARA),4)
  RETURN

ce_charalist:
'update the chara list
  return




'==================CHAR_OPERTOR:

'TODO: CHAROPERATOR:
  'CALL FILESELECTOR(MAPF)
  ' IF SAVING THEN GOSUB MO_SAVE
  ' IF LOADING THEN GOSUB MO_LOAD
  ' GOTO MAPEDITOR

'   MO_SAVE:
'   SAVE MAPF,FILE$(MAPF),$A400,MAPW*MAPH*2+4
'   MESSAGE "SAVED"
'   RETURN

CO_LOAD:
  FILL $9400,$1000
  LOAD CHARF,$9400,$1000
  RETURN



'===================PAL_OPERTOR:

PO_LOAD:
  'TODO: ADD DEFAULT PALETTE
  FILL $DFC0,32
  LOAD PALF,$DFC0,32
  RETURN



#1:MAIN PALETTES
04000007000000000000000000000000
043C0500002C05000002050000030500

#2:MAIN CHARACTERS
00000000000000000000000000000000
FFFFFFFFFFFFFFFF0000000000000000
0000000000000000FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FF000000000000FFFFFFFFFFFFFFFFFF
FF00000000000000FFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFF0101010101010101
3F3F3F3F3F3F3F3FC0C0C0C0C0C0C0C0
FF000000003F3F3FFFFFFFFFFFC0C0C0
FF00000000FFFFFFFFFFFFFFFF000000
FF00000000F8F8F8FFFFFFFFFF070707
F8F8F8F8F8F8F8F80707070707070707
3F3F3F0000000000C0FFFFFFFFFFFFFF
FFFF99C3E7C399FF0000663C183C6600
FFFFFFFFFFE7E7FF0000000000181800
FF9F9F9F9F9F81FF0060606060607E00
FFC399918999C3FF003C666E76663C00
FFE7C7E7E7E781FF0018381818187E00
FFC399F3E7CF81FF003C660C18307E00
FFC399F3F999C3FF003C660C06663C00
FF999981F9F9F9FF0066667E06060600
FF819F83F9F983FF007E607C06067C00
FFE3CF839999C3FF001C307C66663C00
FF81F9F3E7CFCFFF007E060C18303000
FFC399C39999C3FF003C663C66663C00
FFC399C1F999C3FF003C663E06663C00
FFDB818BD181DBFF00247E742E7E2400
F8F8F8000000000007FFFFFFFFFFFFFF
FFFFFF000000000000FFFFFFFFFFFFFF
80000000000000000000000000000000
60F0F060000000000060600000000000
00000000000000000000000000000000
FFDB81DBDB81DBFF00247E24247E2400
FFE7C399819999FF00183C667E666600
FF839983999983FF007C667C66667C00
FFC3999F9F99C3FF003C666060663C00
FF879399999387FF00786C66666C7800
FF819F879F9F81FF007E607860607E00
FF819F879F9F9FFF007E607860606000
FFBD9981819999FF0042667E7E666600
FF998981919999FF0066767E6E666600
FFC399999999C3FF003C666666663C00
FF9999999999C3FF0066666666663C00
FF839983879399FF007C667C786C6600
FFFF00000000000000FF000000000000
FFFFFFFFFFFFFFFFFF00000000000000
00000000000000000000000000000000
00000000000000000000000000000000
FFFFFFFFFFFFFFFF000F030303031F00
FEFEFEFEFEFEFEFE008080808080F000
FFFFFFFFFFFFFFFF000F1C000F1C1F00
FEFEFEFEFEFEFEFE00E07070E000F000
FFFFFFFFFFFFFFFF000F1C01001C0F00
FEFEFEFEFEFEFEFE00E070E07070E000
FFFFFFFFFFFFFFFF000C1D1D1F010100
FEFEFEFEFEFEFEFE0000C0C0C0C0C000
FFFFFFFFFFFFFFFF001F1C1F001C0F00
FEFEFEFEFEFEFEFE00F000E07070E000
FFFFFFFFFFFFFFFF000F1C1C1F1C0F00
FEFEFEFEFEFEFEFE00E07000E070E000
FFFFFFFFFFFFFFFF001F180001030300
FEFEFEFEFEFEFEFE00F070E0C0808000
C0C0C0C0C0C0C0C04040404040404040
FFFFC0C0C0C0C0C0007F404040404040
000000010303013C000000000004063F
2070F8F0E0C080000000000000000000
0C1E13322220100F0C121F3F3F3F1F0F
0000C0B0A80808F00000C0F0F8F8F8F0
F8F8F8F8F8F8F8F80707070707070707
3E3E3E3E3E3E3E3EFEFEFEFEFEFEFEFE
0000000000000000002466E7E7662400
0000000000000000183C7E00007E3C18
002466E7E7662400002466E7E7662400
0000000000000000183C7E00007E3C18
0000000000000000002466E7E7662400
183C7E00007E3C18183C7E00007E3C18
002466E7E7662400002466E7E7662400
183C7E00007E3C18183C7E00007E3C18
000000000000000000038FDEF8F0F8FC
000000000000000000E0F83C0E060000
07000300F80070007077737303FB7373
C000803E001C00001CDC9C80BE9C9C9C
FF808087878080FF007F7F7F7C7F7F7F
FE0202C2C20202FE02FEFEFE7EFEFEFE
000000004027100808183F7F7F3F1808
0000000000FC00000000FCFCFCFC0000
3E3A3A3E007F7F7FFFFFFFFFFF808080
00003E001C0000001C9C80BE9C9C9C9C
E0C6A61919666601001F3F7F7F7F7E00
00001E808C40C0C00C8C809E8C0C0C0C
3333CCCC3333CCCCFFFFFFFFFFFFFFFF
9CBE1C008894361C8080A29C88888880
0000787800080001007884ACFCFD7901
081C3E7CF8F0600000000000000080C0
00CCCC3030CCCC0100FCFCFCFCFDFD01
081C3E7CF8F0600000000000000080C0
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
3333CCCC3333CCCCFFFFFFFFFFFFFFFF
3C7E3C001824663C0000423C18181800
00000000000000000000000000000000
3333CCCC3333CCCCFFFFFFFFFFFFFFFF
3C7E763C1818180000000800183C7E3C
00000000000000000000000000000000
E3D38C4C3333CCCD0F1F3F7FFFFFFEFC
0000DEC00C40C0C0CCCCC0DE8C0C0C0C
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
CC993366CC9933673F7EFCF9F3E7CF9E
00000000000000000000000000000000
00181C1C1C0C180C00000404040C000C
006C7E36120000000000121212000000
00247E3F367E3F120000001B12001B12
00083E3F1E3F1F040000000710011704
0062753A142E57230000113204081123
001C3E3A7E773A1D00000A021013001D
00181C3C180000000000040C18000000
000C1E3C38180C060000060C08000006
0030180C0E1E3C180000000002060C18
0000241A7E3F2C120000000200270812
0000181C7E3F1C0C000000040027040C
00000000181C3C180000000000040C18
000000007E3F000000000000003F0000
0000000000181C0C000000000000040C
00060F1E3C787020000003060C183020
003C7E7F777F3F1E000018110119031E
00183C1C1C1C7E3F000004040404003F
003C7E3F1E3C7E3F00001833060C003F
003C7E3F06673F1E000018330001031E
0066777F3F0707030000110139010103
007E7F7C3E077F3E00001F003801033E
001C3E7C7E773F1E00000E001811031E
007E3F0F1E3C381800003903060C0818
003C7E3F7E773F1E000018031811031E
003C7E3F1F673F1E000018011901031E
000000180C180C00000000000C000C00
000000180C183C18000000000C000C18
00000C1E3C180C06000000060C000006
0000007E3F7E3F00000000003F003F00
000030180C1E3C180000000000060C18
003C7E3F1E0C180C00001833060C000C
003C7E7F7F773C1E000018111117001E
00183C7E7F7F77330000001801191133
007C7E7F7E777F3E000018031811033E
003C7E7370763F1E000018131010031E
00787C76777F7E3C000010101113063C
007E7F787C707E3F00001F001C10003F
007E7F787C70703000001F001C101030
003C7E7E77773F1E00001E101111031E
0066777F7F7777330000110119111133
003C1E1C1C1C3C1E000006040404001E
001E0F0707673F1E000009010101031E
00667F7E7C7C76330000130604101033
0060707070707E3F000010101010003F
0042677F7F7F77330000010101191133
0066777F7F7777330000010111111133
003C7E7777773F1E000018111111031E
007C7E7F7E707030000018031E101030
003C7E777B7D3E1F000018111111001F
007C7E7F7E7C76330000180306101033
003E7F3C1E077F3E00001F001801033E
007E3F1C1C1C1C0C000027040404040C
0066777777773F1E000011111111031E
00667777773F1E0C000011111103060C
0066777F7F7F73210000110101193121
00663F1E3C7E77330000030600181133
0066773F1E1C1C0C000011030604040C
007E3F1E3C787E3F000033060C18003F
003C3E3838383C1E00000E080808001E
006030180C0603010000000000000101
003C1E0E0E0E3E1E000012020202021E
00183C7E330000000000001833000000
0000000000007E3F000000000000003F

#3:MAIN BG
00001C0C042704270427042704270427
04270427042704270427042704270427
04270427042704270427042704270427
04270427042704270427042701270127
01270127012701270127012706270027
00270027002700270027002700270027
0027002700270027002700270027062F
01270127012701270127012728272A27
27272027062700270027002700270027
00270027002700270027002700270027
002700270027062F0127012701270127
01270127102710271027102706270027
00270027002700270027002700270027
0027002700270027002700270027062F
01270127012701270127012701270127
01270127062700270027002700270027
00270027002700270027002700270027
002700270027062F0127012705270527
0527082709270A270527082709270A27
082709270A27082709270A2708270927
0A27082709270A27082709270A270527
05270527022703270227072701270B27
0227072701270B27072701270B270727
01270B27072701270B27072701270B27
072701270B2702270327022702270227
02270C271C271B2702270C271C271B27
0C271C271B270C271C271B270C271C27
1B270C271C271B270C271C271B270227
02270227052705270527052705270527
05270527052705270527052705270527
05270527052705270527052705270527
05270527052705270527052702270227
02270227022702270227022702270227
02270227022702270227022702270227
02270227022702270227022702270227
02270227022702270227022702270227
02270227022702270227022702270227
02270227022702270227022702270227
02270227022702270227022705370537
05370537053705370537053705370537
05370537053705370537053705370537
05370537053705370537053705370537
05370537

#4:PARTS BG
00002010010701070107010701070607
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010728072A07270720070607
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010710071007100710070607
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010701070107010701070607
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010701070107010701070607
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000230725070F070F0720070607
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010701070D07010701070607
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000010701070107010701070607
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
000000002D072D072D072D072D072D07
2D072D072D072D072D072D072D072D07
2D072D072D072D072D072D072D072D07
2D072D072D072D072D072D072D072D07
2D072D07010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
01070107010701070107010701070107
010701072D172D172D172D172D172D17
2D172D172D172D172D172D172D172D17
2D172D172D172D172D172D172D172D17
2D172D172D172D172D172D172D172D17
2D172D17000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000

